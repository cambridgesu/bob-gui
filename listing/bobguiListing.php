<?php


#!# Wide logos - add max width checking or resizeTo algorithm

# Class to create a GUI for listing BOB instances
class bobguiListing extends frontControllerApplication
{
	# Config defaults (setting both structure and default values; NULL means that the instantiator must supply a value)
	protected function defaults ()
	{
		$defaults = array (
			
			# Database credentials
			'hostname' => 'localhost',
			'username' => NULL,
			'password' => NULL,
			'database' => 'votes',
			'table' => 'instances',
			'databaseStaging' => 'votesstaging',
			'vendor'						=> 'mysql',	// Database vendor
			
			# Database installation credentials
			'installerUsername' => 'root',
			'installerPassword' => false,
			
			# Organisation name
			'organisationName' => false,
			
			# E-mail address used for error reports generated by bobgui itself
			'administratorEmail' => NULL,
			
			# Control panel URL (on 'write' server)
			'controlPanelOnlyUsers' => false,	// Show the control panel link for specified users only (space-separated list of usersnames, e.g. 'user1 user2 user3', or do not limit (i.e. show to everyone) (boolean false)
			'controlPanelLinkDirectly' => false,	// Whether to link directly to the control panel or have an intermediate page
			'controlPanelUrl' => NULL,
			
			# Month of the year when an academic year is split from
			'startMonth' => 9,	// Actually October is more 'correct', but 9 is safer and will catch elections just before term-start; see also http://www.cam.ac.uk/about-the-university/term-dates-and-calendars
			
			# Number of days considered 'recent' when viewing listings
			'recentDays' => 14,
			
			# Mail domain of users, e.g. example.com
			'mailDomain' => NULL,
			
			# Style for this GUI
			'headerLocation'		=> '/style/header.html',
			'footerLocation'		=> '/style/footer.html',
			
			# Ballots to hide from all listings
			'hideBallots' => false,	// array (),
			
			# Organisations that have been renamed, as from=>to
			'renamedOrganisations' => false,	// array (),
			
			# Labelling changes
			'welcomeMessageHtml' => false,
			'assumeSingleOrganisation' => false,
		);
		
		return $defaults;
	}
	
	
	# Registry of available actions
	protected function actions ()
	{
		$actions = array (
			'home' => array (
				'description' => false,
			),
			'ingest' => array (
				'description' => false,
			),
			'open' => array (
				'description' => 'Currently-open ballots',
			),
			'forthcoming' => array (
				'description' => 'Forthcoming ballots',
			),
			'closed' => array (
				'description' => 'Closed ballots',
			),
			'archive' => array (
				'description' => 'Older ballots',
			),
			'controlpanel' => array (
				'description' => 'Control panel',
				#!# NB The URL /controlpanel.html is still registered at htaccess level, though this is not in practice a problem as the frontController will not respond to it
				'enableIf' => ($this->controlPanelLinkEnabled && !$this->settings['controlPanelLinkDirectly']),
			),
			'loggedout' => array (
				'description' => 'Logged out',
			),
			'organisation' => array (
				'description' => false,
			),
			'organisationyear' => array (
				'description' => false,
			),
		);
		
		return $actions;
	}
	
	
	# Database bootstrapping
	protected function databaseStructure ()
	{
		# Define the database bootstrap SQL, with %s as a placeholder for a database name
		$sql = "
		CREATE TABLE IF NOT EXISTS `%s`.`instances` (
		  `id` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Generated globally-unique ID',
		  `url` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Computed URL location of this ballot',
		  `academicYear` varchar(5) collate utf8_unicode_ci NOT NULL COMMENT 'Computed academic year string',
		  `urlSlug` varchar(20) collate utf8_unicode_ci NOT NULL COMMENT 'Unique identifier for this ballot',
		  `provider` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Provider name',
		  `organisation` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Organisation name',
		  `title` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Title of this ballot',
		  `urlMoreInfo` varchar(255) collate utf8_unicode_ci default NULL COMMENT 'URL for more info about the ballot',
		  `frontPageMessageHtml` text collate utf8_unicode_ci default NULL COMMENT 'Optional front-page message',
		  `afterVoteMessageHtml` text collate utf8_unicode_ci default NULL COMMENT 'An extra message, if any, which people will see when they have voted',
		  `emailReturningOfficer` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'E-mail address of Returning Officer / mailbox',
		  `emailTech` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'E-mail address of Technical Administrator',
		  `officialsUsernames` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Usernames of Returning Officer + Sysadmins',
		  `randomisationInfo` enum('','Candidate order has been automatically randomised','Candidate order has been automatically alphabetised','Candidates have been entered by the Returning Officer in the order shown') collate utf8_unicode_ci default NULL COMMENT 'Candidate ordering/randomisation',
		  `organisationName` varchar(255) collate utf8_unicode_ci default NULL COMMENT 'Organisation name',
		  `organisationUrl` varchar(255) collate utf8_unicode_ci default NULL COMMENT 'Organisation URL',
		  `organisationLogoUrl` varchar(255) collate utf8_unicode_ci default NULL COMMENT 'URL of organisation''s logo',
		  `addRon` enum('','Yes','No') collate utf8_unicode_ci NOT NULL COMMENT 'Should Re-Open Nominations (RON) be automatically added as an additional candidate in each election?',
		  `electionInfo` text collate utf8_unicode_ci NOT NULL COMMENT 'Election info: Number of positions being elected; Position title; Names of candidates; each block separated by one line break',
		  `electionInfoAsEntered` text collate utf8_unicode_ci NOT NULL COMMENT 'Election info',
		  `referendumThresholdPercent` int(2) default '10' COMMENT 'Percentage of voters who must cast a vote in a referendum for the referendum to be countable',
		  `ballotStart` datetime NOT NULL COMMENT 'Start date/time of the ballot',
		  `ballotEnd` datetime NOT NULL COMMENT 'End date/time of the ballot',
		  `paperVotingEnd` datetime NULL COMMENT 'End time of paper voting, if paper voting is also taking place',
		  `instanceCompleteTimestamp` datetime default NULL COMMENT 'Timestamp for when the instance (configuration and voters list) is complete',
		  PRIMARY KEY  (`id`)
		) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
		";
		
		# Create a set of statements, one for each database
		$sql = array (
			sprintf ($sql, $this->settings['database']),
			sprintf ($sql, $this->settings['databaseStaging']),
		);
		
		# Return the SQL array
		return $sql;
	}
	
	
	# Additional default processing, before actions processing
	public function mainPreActions ()
	{
		# Enable the control panel for all users, except if a username list has been supplied, in which case determine if the current user is amongst them
		$this->controlPanelLinkEnabled = true;	// Enabled for all users by default
		if (is_string ($this->settings['controlPanelOnlyUsers']) && strlen ($this->settings['controlPanelOnlyUsers'])) {
			$usernames = preg_split ("/[\s]+/", trim ($this->settings['controlPanelOnlyUsers']));
			$this->controlPanelLinkEnabled = (in_array ($this->user, $usernames, true));	// True or false, depending on whether the user is in the list
		}
		
	}
	
	
	# Additional default processing
	public function main ()
	{
		# Add styles
		echo "\n" . '<style type="text/css">';
		echo $this->defaultStyles ();
		echo "\n" . '</style>';
		
	}
	
	
	# Define default styles
	private function defaultStyles ()
	{
		# Return the styles
		return '
		/* Internal styles */
		p.loggedinas {text-align: right;}
		p.ballottitle {margin-bottom: 2px; color: #777;}
		p.ballotinfo {margin-top: 0;}
		ul.actions {margin-bottom: 1.2em; margin-left: 0;}
		ul.actions li {list-style: none;}
		ul.actions li a {display: block; border-bottom: 0; border: 1px solid #ddd; padding: 4px 8px 2px; border-radius: 4px; width: 18em;}
		ul.actions.left {float: none;}
		ul.actions li {margin-bottom: 7px;}
		p.electoralroll, ul.actions li a, p.winner {background-repeat: no-repeat; background-position: 6px 5px; padding-left: 18px;}
		ul.actions li a {font-weight: bold;}
		p.electoralroll {background-image: url(/images/icons/script.png);}
		ul.actions li.vote a {background-image: url(/images/icons/pencil.png);}
		ul.actions li.showvotes a {background-image: url(/images/icons/application_view_list.png);}
		ul.actions li a:hover {background-color: #e8c8c8;}
		ul.actions li a img {margin-right: 2px;}
		ul.actions li a.incomplete {border-style: dashed;}
		ul.actions li a.caution {margin-top: 1.8em;}
		ul.actions li a.caution:hover {background-color: red; color: white;}
		table.selectlist td {padding-top: 0.6em; padding-bottom: 1em;}
		table.selectlist td.key {padding-right: 25px; text-align: right; width: 200px;}
		table.selectlist td.key a {border-bottom: 0;}
		table.selectlist td.key a:hover {background-color: transparent;}
		table.selectlist td.key img {border: 0; max-width: 300px;}
		table.selectlist td.value h2 {margin-top: 0; padding-top: 0; margin-bottom: 0; padding-bottom: 0; border-bottom: 0;}
		table.selectlist td.value ul {list-style: none; margin-left: 0; padding-left: 1.5em; margin-top: 5px; padding-top: 0;}
		table.ballotsummary td.value {font-weight: bold;}
		.ultimateform table.nolines {width: 98%;}
		.ultimateform table.nolines td.key {width: 200px;}
		.ultimateform table.nolines table td {border: 0; padding: 0 5px; font-family: monospace; line-height: 1.2em;}
		img.right {margin-bottom: 10px;}
		hr.clear {clear: both; margin-top: 1em; border: 0; height: 1px;}
		#footerleft {width: 350px;}
		#footerright {color: #aaa;}
		#footerarea span {padding: 10px 40px;}
		form div p.description, form div p.widget, form div p.hint {padding: 0; margin: 0; line-height: 1.2em;}
		form div p.description {margin-top: 1em;}
		form div p.widget {margin-top: 0.3em; color: #603;}
		form div#form_urlSlug p.widget span.noneditable {font-weight: bold;}
		form div#form_urlSlug p.widget input {margin-left: 4px; margin-right: 4px;}
		form div div p {line-height: 1.45em;}
		form div p.hint {margin-top: 0.3em; margin-bottom: 2em; font-size: 0.9em; font-style: italic; color: #666;}
		form ul.errors li {color: red; font-style: italic;}
		form p.submit input {font-size: 1.2em; min-width: 8em;}
		span.formprepend, span.formappend {color: #603;}
		p.ballotStart_time, p.ballotEnd_time, p.ballotView_time {margin-bottom: 0;}
		p.ballotStart_date, p.ballotEnd_date, p.ballotView_date {margin-top: 0; position: relative; top: -0.5em;}
		#pagemenu ul li.page_item a {padding-left: 15px; padding-right: 15px;}
		* html #pagemenu ul li.page_item a, #pagemenu ul li.cat-item a {padding: 5px 15px;} /* IE6 layout hack */
		p.winner {color: #603; font-weight: bold; background-image: url(/images/icons/bullet_go.png); background-position: 5px 1px;}
		table.lines td.transferexplanation {padding-bottom: 1.25em;}
		table.regulated td.key p {width: 150px;}
		form h3 {padding-top: 1em;}
		div.controlpanelonlyusers {border-top: 1px dashed #bbb; border-bottom: 1px dashed #bbb; padding: 10px 10px 3px 0; margin: 30px 0; background-image: linear-gradient(to top right, #FFFFFF 0%, #EEEEEE 100%);}
		body div.controlpanelonlyusers h2 {margin-top: 0; padding-top: 0;}
		div.controlpanelonlyusers p.limitedaccess {float: right; color: gray;}
		
		/* CUSU house style overrides */
		h1 {padding-right: 11em; margin-top: 5px; margin-bottom: 1em;}
		ul#page-list li {border: 0; padding: 0; margin: 0 1px 0 0;}
		ul#page-list li a {background-color: #eee; padding: 5px 10px; border-right: 1px solid #bbb;}
		ul#page-list li a:hover {background-color: #e7e7e7;}
		ul.actions li a {padding-top: 6px; padding-bottom: 6px;}
		table.selectlist td.value h2 a {color: #272425; border-bottom: 0;} 
		';
	}
	
	
	# Home page
	public function home ()
	{
		# Opening text
		$html  = "\n" . '<h1>Welcome</h1>';
		if ($this->settings['welcomeMessageHtml']) {
			$html .= "\n" . $this->settings['welcomeMessageHtml'];
		} else {
			$html .= "\n" . '<p>Welcome to the ' . ($this->settings['organisationName'] ? htmlspecialchars ($this->settings['organisationName']) . ' ' : '') . 'voting portal. Here you can submit a vote on ballots for which you have voting rights' . ($this->controlPanelLinkEnabled ? ($this->settings['controlPanelOnlyUsers'] ? '.<br />As an Administrator, you can also create ballots' : ', or create a new ballot if you run a University-based group') : '') . '.</p>';
		}
		$html .= "\n<h2>Current ballots - submit your vote</h2>";
		$html .= $this->currentBallotsListing ();
		$html .= "\n<h2>Forthcoming ballots</h2>";
		$html .= $this->forthcomingBallotsListing ();
		$html .= "\n<h2>Closed ballots</h2>";
		$html .= "\n<ul class=\"actions left\">";
		$html .= "\n\t<li><a href=\"{$this->baseUrl}/closed.html\"><img src=\"/images/icons/book.png\" alt=\"\" class=\"icon\" /> Recent ballots</a></li>";
		$html .= "\n\t<li><a href=\"{$this->baseUrl}/archive.html\"><img src=\"/images/icons/book_addresses.png\" alt=\"\" class=\"icon\" /> Archive of all ballots</a></li>";
		$html .= "\n</ul>";
		if ($this->controlPanelLinkEnabled) {
			$controlPanelLink = ($this->settings['controlPanelLinkDirectly'] ? $this->settings['controlPanelUrl'] : "{$this->baseUrl}/controlpanel.html");
			$html .= "\n<div class=\"administerballots" . ($this->settings['controlPanelOnlyUsers'] ? ' controlpanelonlyusers' : '') . '">';
			if ($this->settings['controlPanelOnlyUsers']) {
				$html .= "\n\t<p class=\"limitedaccess\">This section does not appear to ordinary users.</p>";
			}
			$html .= "\n\t<h2>Create/administer ballots</h2>";
			$html .= "\n\t<ul class=\"actions left\">";
			$html .= "\n\t\t<li><a href=\"{$controlPanelLink}\"><img src=\"/images/icons/cog.png\" alt=\"\" class=\"icon\" /> Create/administer ballots</a></li>";
			$html .= "\n\t</ul>";
			$html .= "\n</div>";
		}
		$html .= "\n" . '<p>Access to this system is only available via Raven, and all access is logged for security.</p>';
		
		# Show the HTML
		echo $html;
	}
	
	
	# Logged out
	protected function loggedout ()
	{
		# Create the HTML
		$html  = "\n<p>You have been logged out.</p>";
		
		# Show the HTML
		echo $html;
	}
	
	
	# Control panel (as distinct from frontControllerApplication admin area)
	protected function controlpanel ()
	{
		# Start the HTML
		$html  = "\n<div class=\"graybox\">";
		$html .= "\n<p><strong>To add new ballots or administer newly-created ones for which you have administrative rights, you need to use the <a href=\"{$this->settings['controlPanelUrl']}\">Control Panel on the main " . ($this->settings['organisationName'] ? htmlspecialchars ($this->settings['organisationName']) . ' ' : '') . " website</a>.</strong></p>";
		$html .= "\n<p>Ballots <strong>cannot</strong> be deleted or amended in any way from two hours before opening or during a ballot.</p>";
		$html .= "\n</div>";
		
		# Show the HTML
		echo $html;
	}
	
	
	# Function to get instances
	#!# This needs refactoring
	private function getBallotInstances ($limitToUser = false, $specificOrganisation = false, $dateLimitation = false, $regroupByOrganisation = true, $currentBallotsOnly = false, $recentBallotsOnly = false, $closedBallotsOnly = false, $forthcomingBallotsOnly = false)
	{
		# If a specific organisation, convert to array and check for earlier names
		if ($specificOrganisation) {
			$specificOrganisations = array ();
			$specificOrganisations[] = $specificOrganisation;
			if ($this->settings['renamedOrganisations']) {
				foreach ($this->settings['renamedOrganisations'] as $previousName => $currentName) {
					if ($currentName == $specificOrganisation) {
						$specificOrganisations[] = $previousName;
					}
				}
			}
			foreach ($specificOrganisations as $index => $specificOrganisationId) {
				$specificOrganisations[$index] = addslashes ($specificOrganisationId);
			}
		}
		
		# Add additional ordering requirements
		#!# NB Ordering by a computed column (ballotViewable) would become inefficient if the number of rows were very large
		$orderByAdditional = ', ballotViewable DESC, title ASC, ballotEnd DESC, ballotStart DESC';	// Default view is most-recent-first
		if ($forthcomingBallotsOnly && $specificOrganisation) {$orderByAdditional = ', ballotStart';}
		if ($currentBallotsOnly && $specificOrganisation) {$orderByAdditional = ', ballotEnd';}
		if ($recentBallotsOnly) {$orderByAdditional = ', ballotEnd, ballotViewable';}
		if ($closedBallotsOnly) {$orderByAdditional = ', ballotViewable DESC, ballotEnd DESC, ballotStart DESC';}
		if (!$orderByAdditional && $specificOrganisation) {$orderByAdditional = ', id';}	// If requesting a specific organisation with no constraints (i.e. the main listing page), take the latest created one
		
		# Build the query
		$academicYearSql = "CONCAT(
			LPAD(DATE_FORMAT(ballotStart,'%y') - IF(MONTH(ballotStart) < {$this->settings['startMonth']}, 1, 0), 2, '0'),
			'-',
			LPAD(DATE_FORMAT(ballotStart,'%y') - IF(MONTH(ballotStart) < {$this->settings['startMonth']}, 1, 0) + 1, 2, '0')
		)";
		
		# Define the list of databases to retrieve data from
		$databases = array ();
		if (!$closedBallotsOnly) {
			$databases[] = $this->settings['databaseStaging'];
		}
		$databases[] = $this->settings['database'];	// Live data will override staging
		
		# Get the data for each database
		$instances = array ();
		#!# This should really use UNION SELECT which would remove all kinds of listing bugs - see http://www.informit.com/articles/article.aspx?p=30875&seqNum=5
		foreach ($databases as $database) {
			
			# Define the data source
			$dataSource = $database . '.' . $this->settings['table'];
			
			# Compile the query
			$query = "SELECT
					*,
					{$academicYearSql} AS academicYear,
			  /* Computed date statuses - using same logic as BOB itself */
					IF(paperVotingEnd IS NULL, 0, 1) AS splitElection,
					IF((NOW() < ballotStart), 1, 0) AS beforeElection,
					IF(((NOW() >= ballotStart) && (ballotEnd >= NOW())), 1, 0) AS duringElection,
					GREATEST(ballotEnd, IFNULL(paperVotingEnd,0)) AS ballotViewable,
					IF((ballotEnd < NOW()), 1, 0) AS afterElection,
			  /* Other computed statuses */
					IF((NOW() < DATE_SUB(ballotStart, INTERVAL 1 HOUR)), 1, 0) AS isInEditabilityPeriod,		/* Nothing is editable or deleteable from an hour before opening */
					CONCAT(LOWER(DATE_FORMAT(DATE_SUB(ballotStart, INTERVAL 1 HOUR), '%H:%i%p, ')), DATE_FORMAT(DATE_SUB(ballotStart, INTERVAL 1 HOUR), '%W, %D %M %Y')) AS editabilityPeriodEndDateTimeFormatted,
					IF(((ballotEnd < NOW()) && (TO_DAYS(NOW()) - TO_DAYS(ballotEnd) <= {$this->settings['recentDays']})), 1, 0) as recentlyFinished,
					CONCAT(LOWER(DATE_FORMAT(ballotStart, '%H:%i%p, ')), DATE_FORMAT(ballotStart, '%W, %D %M %Y')) as ballotStartFormatted,
					CONCAT(LOWER(DATE_FORMAT(ballotEnd, '%H:%i%p, ')), DATE_FORMAT(ballotEnd, '%W, %D %M %Y')) as ballotEndFormatted,
					CONCAT(LOWER(DATE_FORMAT(GREATEST(ballotEnd, IFNULL(paperVotingEnd,0)), '%H:%i%p, ')), DATE_FORMAT(GREATEST(ballotEnd, IFNULL(paperVotingEnd,0)), '%W, %D %M %Y')) as ballotViewableFormatted,
					CONCAT(DATE_FORMAT(ballotStart, '%M %Y')) as ballotStartMonthYear,
			/* Flags used for special ordering */
					IF(((organisationUrl REGEXP '/cusu') && (organisationName REGEXP 'CUSU')), 1, 0) AS isCusu,	/* This check is not ideal but will do - it is for listing ordering only */
					IF(((organisationUrl REGEXP '/graduateunion') && (organisationName REGEXP 'Graduate Union')), 1, 0) AS isGraduateUnion	/* This check is not ideal but will do - it is for listing ordering only */
				FROM
				{$dataSource}
				WHERE 1=1	/* Used so that 'AND' can be used in all cases below */
				" .
				(($this->user == 'mvl22' || $this->user == 'test0001') ? '' : " AND organisation != 'webmaster'") .	// Webmaster used as a test, and only visible to mvl22/test0001
				(!$specificOrganisation ? " AND organisation != 'test'" : '') .
				($limitToUser ? " AND officialsUsernames REGEXP '[[:<:]]" . addslashes ($limitToUser) . "[[:>:]]'" : '') .	// Word boundaries to avoid e.g. abc12 matching abc123; see http://dev.mysql.com/doc/refman/5.1/en/regexp.html#operator_regexp
				($specificOrganisation ? " AND organisation IN('" . implode ("','", $specificOrganisations) . "')" : '') .
				($specificOrganisation && $dateLimitation ? " AND ((ballotStart >= '{$dateLimitation['startYear']}:{$dateLimitation['startMonthPadded']}:01 00:00:00') && (ballotStart < '{$dateLimitation['endYear']}:{$dateLimitation['endMonthPadded']}:01 00:00:00')) " : '') .	// Date limitation takes the ballotStart as the relevant election time
				($this->settings['hideBallots'] ? " AND id NOT IN('" . implode ("','", $this->settings['hideBallots']) . "')" : '') .
				($forthcomingBallotsOnly ? ' HAVING beforeElection = 1' : '') .
				($currentBallotsOnly ? ' HAVING duringElection = 1' : '') .
				($recentBallotsOnly ? ' HAVING recentlyFinished = 1' : '') .
				($closedBallotsOnly ? ' HAVING afterElection = 1' : '') .
				"
				ORDER BY
					isCusu DESC,	/* CUSU stuff gets listed first */
					isGraduateUnion DESC,	/* GU stuff gets listed next */
					organisationName
					{$orderByAdditional}
				;";
			
			# Get the instances for this database
			$thisDatabaseInstances = $this->databaseConnection->getData ($query, $dataSource);
			
			# Add the instances to the main list
			#!# This results in the odd ordering on the front page
			$instances = array_merge ($instances, $thisDatabaseInstances);
		}
		
		#!# The $orderByAdditional changes result in very odd ordering on the front page. The listing should be by organisationName
		/*
		echo "<!-- ";
		echo htmlspecialchars ($query);
		echo htmlspecialchars (print_r ($instances, 1));
		echo " -->";
		*/
		
		# Merge organisation names where they have been renamed 
		#!# Can disrupt the most-recent-first ordering; perhaps consider a VIEW which loads a proxied table containing the changes already in?
		if ($this->settings['renamedOrganisations']) {
			foreach ($instances as $moniker => $instance) {
				if (isSet ($this->settings['renamedOrganisations'][$instance['organisation']])) {
					$instances[$moniker]['organisation'] = $this->settings['renamedOrganisations'][$instance['organisation']];
				}
			}
		}
		
		# Regroup by organisation if required
		if ($regroupByOrganisation) {
			$instances = application::regroup ($instances, 'organisation');
			
			# Shift GU and then CUSU to the start
			$shifts = array ('graduateunion', 'cusuandgu', 'cusu');	// Note the order
			foreach ($shifts as $shift) {
				if (isSet ($instances[$shift])) {
					$moveThis = $instances[$shift];
					unset ($instances[$shift]);
					$instances = array_merge (array ($shift => $moveThis), $instances);
				}
			}
		}
		
		# Return the instances
		return $instances;
	}
	
	
	# Function to convert a instances array to an HTML listing; if $prefixStringBeforeDate === true, that indicates dynamic computation of current status
	private function ballotsToListing ($ballots, $dateField, $prefixStringBeforeDate = '', $singleOrganisationOnly = false, $controlPanelListingMode = false)
	{
		# Return false if none
		if (!$ballots) {return false;}
		
		# If the ballots are for a single organisation only, make the ballot list hierarchal
		if ($singleOrganisationOnly) {
			$ballots = array ($ballots);
		}
		
		# Arrange the instances
		$list = array ();
		foreach ($ballots as $organisation => $instances) {
			
			# Get the ballots for this organisation
			$ballotsThisOrganisation = array ();
			foreach ($instances as $instanceId => $instance) {
				
				# Assemble the date string
				$dateString = $prefixStringBeforeDate . $instance[$dateField];
				if ($prefixStringBeforeDate === true) {
					switch (true) {	// Dynamic computation
						case $instance['beforeElection']:
							$dateString = 'Opens at ' . $instance['ballotStartFormatted'];
							break;
						case $instance['duringElection']:
							$dateString = 'Opened at ' . $instance['ballotStartFormatted'];
							break;
						case $instance['afterElection']:
							$dateString = 'Closed at ' . $instance['ballotEndFormatted'];
							break;
					}
				}
				
				# Compile the listing
				$ballotsThisOrganisation[$instanceId]  = "<p class=\"ballottitle\"><a href=\"{$this->baseUrl}{$instance['url']}\"><strong>" . htmlspecialchars ($instance['title']) . '</strong></a></p>';
				$ballotsThisOrganisation[$instanceId] .= "<p class=\"ballotinfo\"><span class=\"comment\">({$dateString})</span>";
				if ($controlPanelListingMode) {
					if ($instance['isInEditabilityPeriod']) {
						$ballotsThisOrganisation[$instanceId] .= "<br /><a href=\"{$this->baseUrl}/controlpanel{$instance['url']}\"><img src=\"/images/icons/page_white_edit.png\" alt=\"*\" class=\"icon\" /> Details editable</a> until " . $instance['editabilityPeriodEndDateTimeFormatted'] . '.</p>';
					} else {
						$ballotsThisOrganisation[$instanceId] .= '<br />No longer editable.</p>';
					}
				}
				// Not sure why this was here, but it really disrupts the carefully-assigned order!
				// ksort ($ballotsThisOrganisation);
			}
			$ballotsThisOrganisation = application::htmlUl ($ballotsThisOrganisation, 3, 'spaced');
			
			# Assemble the HTML, using the latest version of the organisationName, organisationUrl and organisationLogoUrl
			//$linkStart = "<a href=\"{$this->baseUrl}{$instance['url']}/\">";
			$logoHtml = ($instance['organisationLogoUrl'] ? "<a href=\"{$this->baseUrl}/{$organisation}/\"><img id=\"{$organisation}\" src=\"{$instance['organisationLogoUrl']}\" alt=\"" . htmlspecialchars ($instance['organisationName']) . "\" height=\"80\" /></a>" : '');
			$title = "\n\t\t\t<h2><a href=\"{$this->baseUrl}/{$organisation}/\">" . htmlspecialchars ($instance['organisationName']) . '</a>:</h2>';
			
			# Compile the table
			$list[$organisation]['logo']  = $logoHtml;
			$list[$organisation]['value']  = $title . $ballotsThisOrganisation . "\n\t\t";
		}
		
		# Compile the selection table
		if ($singleOrganisationOnly) {
			$html = $ballotsThisOrganisation;
		} else {
			$html = application::htmlTable ($list, false, $class = 'selectlist spaced lines', $keyAsFirstRow = false, $uppercaseHeadings = false, $allowHtml = true, $showColons = false, $addCellClasses = true);
		}
		
		# Return the HTML
		return $html;
	}
	
	
	# Function to provide a public front page for each organisation on a per-year basis
	protected function organisationyear ($organisationId)
	{
		# Hand off to the organisation function
		return $this->organisation ($organisationId, true);
	}
	
	
	# Function to provide a public front page for each organisation
	protected function organisation ($organisationId, $date = false)
	{
		# Check if the organisation has a newer name
		if (isSet ($this->settings['renamedOrganisations'][$organisationId])) {
			$replaceFrom = $_SERVER['_SITE_URL'] . '/' . $organisationId . '/';
			$replaceTo = $_SERVER['_SITE_URL'] . '/' . $this->settings['renamedOrganisations'][$organisationId] . '/';
			$delimeter = '@';
			$redirectTo = preg_replace ($delimeter . '^' . preg_quote ($replaceFrom, $delimeter) . $delimeter, $replaceTo, $_SERVER['_PAGE_URL']);
			#!# Ideally would redirect, but not possible
			echo "\n<p>The page has been <a href=\"{$redirectTo}\">moved here</a>.</p>";
			return false;
		}
		
		# Do year lookup if date mode is specified
		$year = array ();
		if ($date) {
			$year = $this->academicYearUrlHandling ();
		}
		
		# Get all ballots for a specific organisation
		if (!$organisationBallots = $this->getBallotInstances (false, $organisationId, $dateLimitation = false, $regroupByOrganisation = false)) {
			$html  = "\n<h1>Ballots for a specific organisation" . ($date ? ($year ? $year['yearString'] : ' for a specific year') : '') . "</h1>";
			$html .= "\n<p>There is no such organisation, or it has not used this system to create any ballots yet.</p>";
			echo $html;
			return false;
		}
		
		# If required, do date-based lookup; ideally this would be combined, but a joint lookup could result in a 'page not found' when the organisation exists but has no ballots for this year
		if ($date) {
			
			# Assign the organisation name (using the last in the list, which is the last created); it is OK to modify the organisationBallots data as it will get overwritten below if the year is valid and there are instances
			$organisation = array_pop ($organisationBallots);
			$organisationName = $organisation['organisationName'];	 // Cache in case the year lookup fails
			
			# Check the year is valid, or end (as date mode has been requested)
			if (!$year) {
				$html  = "\n<h1>Ballots for " . htmlspecialchars ($organisationName) . ' for a specific year</h1>';
				$html .= "\n<p>The specified year was invalid. Please check the URL and try again.</p>";
				echo $html;
				$this->page404 (false);
				return false;
			}
			
			# Allocate the year as $date, as if dateMode is in use, then the year has been validated
			$date = $year;
			
			# Check for instances in this (now validated) year
			if (!$organisationBallots = $this->getBallotInstances (false, $organisationId, $year, $regroupByOrganisation = false)) {
				$html  = "\n<h1>Ballots for " . htmlspecialchars ($organisationName) . $year['yearString'] . '</h1>';
				$html .= "\n<p>There " . ($date['isEarlierAcademicYear'] ? 'were' : 'are') . " no ballots for " . htmlspecialchars ($organisationName) . $year['yearString'] . '.</p>';
				echo $html;
				return false;
			}
		}
		
		# Get the latest created one and use it as the organisation details
		$ballotsForOrganisation = $organisationBallots;	// Create a copy as array_pop will amend the original array otherwise
		$organisation = array_pop ($ballotsForOrganisation);
		
		# Start the HTML with introductory information about the organisation, using the latest in the list
		$html  = "\n<h1>Ballots for " . htmlspecialchars ($organisation['organisationName']) . ($date ? $date['yearString'] : '') . '</h1>';
		$linkStart = ($organisation['organisationUrl'] ? "<a href=\"{$organisation['organisationUrl']}\">" : false);
		$html .= "\n" . ($organisation['organisationLogoUrl'] ? "{$linkStart}<img src=\"{$organisation['organisationLogoUrl']}\" alt=\"" . htmlspecialchars ($organisation['organisationName']) . "\" height=\"80\" class=\"right\" border=\"0\" />" . ($linkStart ? '</a>' : '') : '');
		$html .= "\n<ul>\n\t<li>More information: {$linkStart}" . htmlspecialchars ($organisation['organisationName']) . ($linkStart ? '</a>' : '') . "</li>\n</ul>";
		$html .= "\n<hr class=\"clear\" />";
		
		# Current ballots (show if there is no date limitation, or there is date limitation and it is the current year)
		if (!$date || $date['isCurrentAcademicYear']) {
			$html .= "\n<h2>Current ballots &mdash; " . htmlspecialchars ($organisation['organisationName']) . '</h2>';
			if ($currentBallots = $this->getBallotInstances (false, $organisationId, $dateLimitation = false, $regroupByOrganisation = false, $currentBallotsOnly = true)) {
				$html .= $this->ballotsToListing ($currentBallots, 'ballotEndFormatted', 'Closes ', $singleOrganisationOnly = true);
			} else {
				$html .= "\n<p>There are no ballots currently open for " . htmlspecialchars ($organisation['organisationName']) . '.</p>';
			}
		}
		
		# Older ballots
		$html .= "\n<h2>All ballots &mdash; " . htmlspecialchars ($organisation['organisationName']) . ($date ? $date['yearString'] : '') . '</h2>';
		$html .= "\n<p>The following is a list of all the ballots (past, current or future) registered on this system" . ($date ? $date['yearString'] : '') . ".<br />The opening month of each ballot is also shown.</p>";
		$html .= $this->ballotsToListing ($organisationBallots, 'ballotStartMonthYear', '', $singleOrganisationOnly = true);
		
		# Show the HTML
		echo $html;
	}
	
	
	# Helper function to deal with academic year dates from a year
	private function academicYearUrlHandling ()
	{
		# Get and validate the academic year component of the URL
		$year = (
			   isSet ($_GET['year'])	// There must be year
			&& (preg_match ('/^([0-9]{2})-([0-9]{2})$/D', $_GET['year'], $matches))	// It must match the format xx-xx, e.g. 08-09
			&& (($matches[2] - $matches[1]) == 1)	// Ensure the years are sequential
			&& ($matches[2] <= (date ('y') + 1))	// Ensure the year is not more than next year
			&& ($matches[2] < 38)	// Ensure they are below 2038 (Unix date problem) (to avoid date() crashes on 32bit PHP)
		);
		
		# End if the year is invalid
		if (!$year) {return false;}
		
		# Split the year into a start year and start year
		$date['startYear']  = '20' . $matches[1];
		$date['endYear']    = '20' . $matches[2];
		
		# Assign the start month and year
		$date['startMonth'] = $this->settings['startMonth'];
		$date['endMonth']   = ($this->settings['startMonth'] == 1 ? 12 : ($this->settings['startMonth'] - 1));
		$date['startMonthPadded'] = str_pad ($this->settings['startMonth'], 2, '0', STR_PAD_LEFT);
		$date['endMonthPadded']   = str_pad ($date['endMonth'], 2, '0', STR_PAD_LEFT);
		
		# Create a preset string
		$date['yearString'] = " for the academic year {$date['startYear']}-{$date['endYear']}";
		
		# Set whether this is the current academic year and whether the year has passed
		$now = time ();
		$start = mktime (0, 0, 0, $date['startMonth'], 1, $date['startYear']);
		$ended = mktime (0, 0, 0, $date['startMonth'], 1, $date['endYear']);
		$date['isCurrentAcademicYear'] = (($now >= $start) && ($now < $ended));
		$date['isEarlierAcademicYear'] = ($ended < $now);
		
		# Return the date array
		return $date;
	}
	
	
	# Current ballots
	protected function open ()
	{
		echo $this->currentBallotsListing ();
	}
	
	
	# Current ballots listing HTML
	private function currentBallotsListing ()
	{
		# Get the current ballots or end
		if (!$currentBallots = $this->getBallotInstances (false, false, false, true, $currentBallotsOnly = true)) {
			$html  = "\n<p><strong>There are no ballots currently open.</strong></p>";
		} else {
			
			# Compile the HTML
			$html  = "\n<p>The following ballots are currently taking place.<br />The closing time of online voting for each ballot is also shown.</p>";
			if (!$this->settings['assumeSingleOrganisation']) {
				$html .= "\n<p>(This list shows <strong>all</strong> ballots taking place, <strong>not</strong> merely those that you can vote in.)</p>";
			}
			$html .= $this->ballotsToListing ($currentBallots, 'ballotEndFormatted', 'Closes ');
		}
		
		# Return the HTML
		return $html;
	}
	
	
	# Forthcoming ballots
	protected function forthcoming ()
	{
		echo $this->forthcomingBallotsListing ();
	}
	
	
	# Forthcoming ballots listing HTML
	protected function forthcomingBallotsListing ()
	{
		# Get the current ballots or end
		if (!$forthcomingBallots = $this->getBallotInstances (false, false, false, true, false, false, false, $forthcomingBallotsOnly = true)) {
			$html  = "\n<p><strong>There are no forthcoming ballots.</strong></p>";
		} else {
			
			# Compile the HTML
			$html  = "\n<p>The following online ballots will be taking place soon. If you should be on the electoral roll, follow the link to check.</p>";
			$html .= $this->ballotsToListing ($forthcomingBallots, 'ballotStartFormatted', 'Opens ');
		}
		
		# Return the HTML
		return $html;
	}
	
	
	# Closed ballots
	protected function closed ()
	{
		# Compile the HTML
		$html  = "\n<h2>Recent ballots</h2>";
		if ($recentBallots = $this->getBallotInstances (false, false, false, true, false, $recentBallotsOnly = true)) {
			$html .= "\n<p>The following online ballots closed in the last {$this->settings['recentDays']} days.<br />The time that cast ballots can be viewed is also shown.</p>";
			$html .= "\n<p>A list of <a href=\"{$this->baseUrl}/archive.html\">all closed ballots</a> that have been run via this system can still be viewed.</p>";
			$html .= $this->ballotsToListing ($recentBallots, 'ballotViewableFormatted', 'Ballots viewable from ');
		} else {
			$html  .= "\n<p>There are no recent ballots (last {$this->settings['recentDays']} days).</p>";
		}
		
		# Older ballots
		$html .= "\n<h2>Older ballots</h2>";
		$html .= "\n<p>A list of <a href=\"{$this->baseUrl}/archive.html\">all closed ballots</a> that have been run via this system can still be viewed.</p>";
		
		
		# Show the HTML
		echo $html;
	}
	
	
	# Archived ballots
	protected function archive ()
	{
		# Get the recent ballots or end
		if (!$oldBallots = $this->getBallotInstances (false, false, false, true, false, false, $closedBallotsOnly = true)) {
			$html  = "\n<p>There are no ballots.</p>";
			echo $html;
			return false;
		}
		
		# Count the total
		$total = 0;
		foreach ($oldBallots as $organisation => $ballots) {
			if ($organisation == 'webmaster') {continue;}	// Skip test
			$total += count ($ballots);
		}
		
		# Compile the HTML
		$html  = "\n<p>The following is a list of all the ballots that have been run via this system.<br />The opening month of each ballot is also shown.</p>";
		$html .= "\n<p>A total of <strong>{$total} ballots</strong> have been run by <strong>" . count ($oldBallots) . " organisations</strong>.</p>";
		$html .= "\n<p>(A list of <a href=\"{$this->baseUrl}/closed.html\">recent ballots only (last {$this->settings['recentDays']} days only)</a> is also available.)</p>";
		$html .= $this->ballotsToListing ($oldBallots, 'ballotStartMonthYear');
		
		# Show the HTML
		echo $html;
	}
}




/*
	Libraries
	
	The following is code from external libraries.
	In many cases, the libraries have been cut down considerably, in order to minimise the amount of code here, for auditing purposes
	These are pasted into the file rather than using include/require, again for auditing purposes
*/



# Class to implement a Front Controller, effectively setting up the environment
# License: GPL
# This is basically a heavily simplified backport of frontControllerApplication at http://download.geog.cam.ac.uk/projects/frontcontrollerapplication/
# Some code copied from BOB.php instead, which also uses a simple Front Controller
class frontControllerApplication
{
	# Standard defaults
	private $globalDefaults = array (
		
		# Database credentials
		'hostname' => 'localhost',
		'username' => NULL,
		'password' => NULL,
		'database' => NULL,
		'vendor'						=> 'mysql',	// Database vendor
		
		# E-mail addresses
		'administratorEmail' => NULL,
		
		# Style
		'headerLocation'		=> false,
		'footerLocation'		=> false,
	);
	
	
	# Standard actions
	private $globalActions = array (
			'page404' => array (
			'description' => 'Error 404: page not found',
		),
	);
	
	
	# Skeleton function to define locally-defined defaults; normally overridden
	protected $defaults = array ();
	protected function defaults ()
	{
		return $this->defaults;
	}
	
	
	# Skeleton function to define locally-defined actions; normally overridden
	protected $actions = array ();
	protected function actions ()
	{
		return $this->actions;
	}
	
	
	
	# Class variables
	var $errors = array ();
	var $databaseConnection = NULL;
	
	
	# Constructor (front controller)
	function __construct ($settings = array ())	// $config is an array coming from a launching file such as index.php or index.html which instantiates the class
	{
		# Load external libraries
		#!# Upgrade path loading to __DIR__ when PHP 5.3 on server
		require_once (dirname (__FILE__) . '/../lib/database.php');
		
		# Clean server globals
		pureContent::cleanServerGlobals ();
		
		# Define the location of the stub launching file and the image store
		$this->baseUrl = application::getBaseUrl ();
		
		# Function to merge the arguments; note that $errors returns the errors by reference and not as a result from the method
		$this->defaults = array_merge ($this->globalDefaults, $this->defaults ());
		if (!$this->settings = $this->mergeConfiguration ($this->defaults, $settings)) {
			$this->reportErrors ();
			return false;
		}
		
		# Obtain the house style files (header and footer)
		$houseStyleParts = array ('header', 'footer');
		foreach ($houseStyleParts as $houseStylePart) {
			${$houseStylePart} = false;	// i.e. create $header and $footer
			if ($this->settings[$houseStylePart . 'Location']) {
				$file = $_SERVER['DOCUMENT_ROOT'] . $this->settings[$houseStylePart . 'Location'];
				if (is_readable ($file)) {
					${$houseStylePart} = file_get_contents ($file);
				}
			}
		}
		
		# Show the header (if any)
		echo $header;
		
		# Ensure a clean server environment (e.g. register_globals off, etc.)
		if (!$this->environmentIsOk ()) {
			$this->reportErrors ();
			echo $footer;
			return false;
		}
		
		# Ensure there is a username and assign it
		if (!$this->user = $this->getUsername ()) {
			$this->reportErrors ();
			echo $footer;
			return false;
		}
		
		# Open the database connection
		$this->databaseConnection = new database ($this->settings['hostname'], $this->settings['username'], $this->settings['password'], $this->settings['database'], $this->settings['vendor']);
		if (!$this->databaseConnection->connection) {
			$this->errors[] = 'The system was unable to connect to the database.';
			$this->reportErrors ();
			echo $footer;
			return false;
		}
		
		# Assign a shortcut for the database table in use
		$this->dataSource = $this->settings['database'] . '.' . $this->settings['table'];
		
		# Additional processing, before actions processing phase, if required
		if (method_exists ($this, 'mainPreActions')) {
			$this->mainPreActions ();
		}
		
		# Get the action
		$this->action = (isSet ($_GET['action']) ? $_GET['action'] : 'home');
		$this->item = (isSet ($_GET['item']) ? strtolower ($_GET['item']) : false);
		
		# Setup the database if required
		if (method_exists ($this, 'databaseStructure')) {
			if (!$this->databaseSetup ($html)) {
				echo $html;
				echo $footer;
				return true;
			}
		}
		
		# Get the registered actions
		$this->actions = array_merge ($this->globalActions, $this->actions ());
		
		# Disable (remove) an action if required; this is basically a convenience flag to avoid having to do unset() after an array definition
		foreach ($this->actions as $action => $attributes) {
			if (isSet ($attributes['enableIf'])) {
				if (!$attributes['enableIf']) {
					unset ($this->actions[$action]);
				}
			}
		}

		# Default to home if no valid action selected
		if (!$this->action || !array_key_exists ($this->action, $this->actions)) {
			$this->action = 'home';
		}
		
		# Additional processing if required
		if (method_exists ($this, 'main')) {
			$this->main ();
		}
		
		# Show the username
		echo '<p class="loggedinas noprint">You are logged in as: <strong>' . $this->user . "</strong> [<a href=\"{$this->baseUrl}/logout.html\" class=\"logout\">log out</a>]</p>";
		
		# Show the page title
		if ($this->actions[$this->action]['description']) {echo "\n<h1>{$this->actions[$this->action]['description']}</h1>";}
		
		# Perform the action
		$action = $this->action;
		$this->$action ($this->item);
		
		# Show the footer (if any)
		echo $footer;
	}
	
	
	# Function to check that the environment is clean
	private function environmentIsOk ()
	{
		# Start a list of errors (so that all settings setup errors are shown at once)
		$errors = array ();
		
		# Define settings that must be off to ensure the highest level of security
		$optionsOff = array (
			'register_globals',
			'auto_prepend_file',
			'auto_append_file',
			'magic_quotes_gpc',
			'magic_quotes_runtime',
			'magic_quotes_sybase',
			// 'output_buffering',	// Has to be on for bobgui
			'safe_mode',
			'expose_php',
			'file_uploads',
#!# Remove from release
//			'display_errors',
		);
		
		# Ensure each option is off
		foreach ($optionsOff as $option) {
			if ((bool) ini_get ($option)) {
				$errors[] = "The server environment currently has the PHP '<strong>{$option}</strong>' setting switched on so this system will not run. The administrator needs to switch it off first.";
			}
		}
		
		# Assign the errors
		if ($errors) {
			$this->errors += $errors;
			return false;
		}
		
		# Signal that this test has been passed
		return true;
	}
	
	
	# Function used by assignConfiguration to merge defaults with supplied config
	private function mergeConfiguration ($defaults, $suppliedArguments)
	{
		# Start a list of errors (so that all setup errors are shown at once)
		$errors = array ();
		
		# Merge the defaults
		$arguments = array ();
		foreach ($defaults as $argument => $defaultValue) {
			
			# Sanity check: fields marked NULL or array() in the defaults MUST be supplied in the config and must not be an empty string
			if ((is_null ($defaultValue) || $defaultValue === array ()) && (!isSet ($suppliedArguments[$argument]) || !strlen ($suppliedArguments[$argument]))) {
				$errors[] = "No '<strong>{$argument}</strong>' has been set in the configuration.";
				
			# Having passed the check, reverting to the default value if no value is specified in the supplied config
			} else {
				$arguments[$argument] = (isSet ($suppliedArguments[$argument]) ? $suppliedArguments[$argument] : $defaultValue);
			}
		}
		
		# Assign and return the errors if there are any
		if ($errors) {
			$this->errors += $errors;
			return false;
		}
		
		# Return the arguments
		return $arguments;
	}
	
	
	# Generalised support function to display errors
	protected function reportErrors ($display = true)
	{
		# Build up a list of errors if there are any
		$html = '';
		if ($this->errors) {
			$html .= "\n<p class=\"warning\">Apologies, a technical error occurred during this operation.</p>\n<p><strong>This has been reported to the Webmaster</strong>, who will investigate and get back to you as soon as possible.</p>";
			$subject = get_class ($this) . ' user runtime error';
			$message = (isSet ($_SERVER['_PAGE_URL']) ? "URL of page:\n" . $_SERVER['_PAGE_URL'] : '') . "\n\nError details:\n" . implode ("\n", $this->errors) . (isSet ($this->user) ? "\n\nEncountered by user:\n" . $this->user : '');
			$extraHeaders = 'From: ' . $this->settings['administratorEmail'] . "\n" . 'Reply-To: ' . $this->user . '@' . $this->settings['mailDomain'];
			mail ($this->settings['administratorEmail'], $subject, $message, $extraHeaders);
		}
		
		# Explicitly close the database connection to prevent further execution (this is otherwise done implicitly by PHP anyway at script end)
		$this->databaseConnection->close ();
		
		# Show the error if required
		if ($display) {echo $html;}
	}
	
	
	# Function to check and obtain the username
	private function getUsername ()
	{
		# If there is no REMOTE_USER from the webserver, explain that an .htaccess file is needed, and end
		if (!isSet ($_SERVER['REMOTE_USER']) || empty ($_SERVER['REMOTE_USER'])) {
			
			# Generate a random string of length 10 characters
			$this->errors[] = 'The server is not supplying a username, so this system will not run.';
			return false;
		}
		
		# Return the username
		return $_SERVER['REMOTE_USER'];
	}
	
	
	# Function to set up the database
	private function databaseSetup (&$html)
	{
		# Get the tables, or end if already present
		if ($tables = $this->databaseConnection->getTables ($this->settings['database'])) {return true;}
		
		# End if no database installer password is supplied
		if (!$this->settings['installerPassword']) {return false;}
		
		# Make a database collection using the installer password
		if (!$installerDatabaseConnection = $this->installerDatabaseConnection ($this->settings['installerPassword'], $databaseError)) {
			$html  = "\n<p>The database setup process did not complete. You may need to set this up manually. The database error was:</p>";
			$html .= "\n<p><pre>" . wordwrap (htmlspecialchars ($databaseError)) . '</pre></p>';
			return false;
		}
		
		# Get the database structure
		$databaseStructure = $this->databaseStructure ();
		
		# Ensure the SQL is an array of queries
		if (!is_array ($databaseStructure)) {
			$databaseStructure = array ($databaseStructure);
		}
		
		# Execute each query, and show failure error message if something went wrong
		$i = 0;
		foreach ($databaseStructure as $query) {
			$i++;
			if (!$result = $installerDatabaseConnection->query ($query)) {
				$html  = "\n<p>The database setup process did not complete" . (count ($databaseStructure) > 1 ? ", failing at query #{$i}" : '') . ". You may need to set this up manually. The database error was:</p>";
				$databaseError = $installerDatabaseConnection->error ();
				$html .= "\n<p><pre>" . wordwrap (htmlspecialchars ($databaseError[2])) . '</pre></p>';
				return false;
			}
		}
		
		# Confirm success
		return true;
	}
	
	
	# Function to connect to the database with the installer account
	private function installerDatabaseConnection ($password, &$errorMessage = '')
	{
		# Attempt the connection
		$installerDatabaseConnection = new database ($this->settings['hostname'], $this->settings['installerUsername'], $password, $this->settings['database'], $this->settings['vendor'], false, $this->user);
		
		# End if no connection, defining the error message
		if (!$installerDatabaseConnection->connection) {
			$errorMessage = "Could not connect using that password for " . htmlspecialchars ($this->settings['hostname']);
			return false;
		}
		
		# Return the connection resource
		return $installerDatabaseConnection;
	}
	
	
	# 404 page
	function page404 ($showMessage = true)
	{
		# End here
		#!# This should require output_buffering 0 but not critical
		application::sendHeader (404);
		if ($showMessage) {echo "<p>Sorry, that page was not found. Please check the URL or use the menu to navigate elsewhere.</p>";}
		return false;
	}
}



# Utilities from pureContent library
# License: GPL
# This is basically a cut-down version of http://download.geog.cam.ac.uk/projects/purecontent/ , from version 1.4.2
class pureContent {
	
	# Function to clean and standardise server-generated globals
#!# Could be cut down further
	function cleanServerGlobals ($directoryIndex = 'index.html')
	{
		# Assign the server root path, non-slash terminated
		$_SERVER['DOCUMENT_ROOT'] = ((substr ($_SERVER['DOCUMENT_ROOT'], -1) == '/') ? substr ($_SERVER['DOCUMENT_ROOT'], 0, -1) : $_SERVER['DOCUMENT_ROOT']);
		
		# Assign the server root path
		// $_SERVER['SCRIPT_FILENAME'];
		
		# Assign the domain name
		if (!isSet ($_SERVER['SERVER_NAME'])) {$_SERVER['SERVER_NAME'] = 'localhost';}	// Emulation for CGI/CLI mode
		
		# Assign the page location (i.e. the actual script opened), with index.html removed if it exists, starting from root
		$_SERVER['PHP_SELF'] = ereg_replace ("/$directoryIndex\$", '/', $_SERVER['PHP_SELF']);
		$_SERVER['SCRIPT_NAME'] = ereg_replace ("/$directoryIndex\$", '/', $_SERVER['SCRIPT_NAME']);
		
		# Assign the page location (i.e. the page address requested) with query, removing double-slashes and the directory index
		if (!isSet ($_SERVER['REQUEST_URI'])) {$_SERVER['REQUEST_URI'] = ereg_replace ('^' . $_SERVER['DOCUMENT_ROOT'], '', $_SERVER['SCRIPT_FILENAME']);}	// Emulation for CGI/CLI mode
		$currentPath = ereg_replace ("/$directoryIndex\$", '/', $_SERVER['REQUEST_URI']);
		while (strpos ($currentPath, '//') !== false) {$currentPath = str_replace ('//', '/', $currentPath);}
		$_SERVER['REQUEST_URI'] = $currentPath;
		
		# Assign the current server protocol type and version
		if (!isSet ($_SERVER['SERVER_PROTOCOL'])) {$_SERVER['SERVER_PROTOCOL'] = 'HTTP/1.1';}	// Emulation for CGI-CLI mode
		list ($protocolType, $_SERVER['_SERVER_PROTOCOL_VERSION']) = explode ('/', $_SERVER['SERVER_PROTOCOL']);
		$_SERVER['_SERVER_PROTOCOL_TYPE'] = ((isSet ($_SERVER['HTTPS']) && (strtolower ($_SERVER['HTTPS']) == 'on')) ? 'https' : 'http');
		
		# Assign the site URL
		$_SERVER['_SITE_URL'] = $_SERVER['_SERVER_PROTOCOL_TYPE'] . '://' . $_SERVER['SERVER_NAME'];
		
		# Assign the complete page URL (i.e. the full page address requested), with index.html removed if it exists, starting from root
		$_SERVER['_PAGE_URL'] = $_SERVER['_SITE_URL'] . $_SERVER['REQUEST_URI'];
		
		#!# Needs further work
		// $_SERVER['SCRIPT_URL'];
		
		# Assign the query string (for the few cases, e.g. a 404, where a REDIRECT_QUERY_STRING is generated instead
		$_SERVER['QUERY_STRING'] = (isSet ($_SERVER['REDIRECT_QUERY_STRING']) ? $_SERVER['REDIRECT_QUERY_STRING'] : (isSet ($_SERVER['QUERY_STRING']) ? $_SERVER['QUERY_STRING'] : ''));
		
		# Assign the referring page
		$_SERVER['HTTP_REFERER'] = (isSet ($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '');
		
		# Assign the user's IP address
		// $_SERVER['REMOTE_ADDR'];
		
		# Assign the username
		$_SERVER['REMOTE_USER'] = (isSet ($_SERVER['REMOTE_USER']) ? $_SERVER['REMOTE_USER'] : (isSet ($_SERVER['PHP_AUTH_USER']) ? $_SERVER['PHP_AUTH_USER'] : NULL));
		
		# Assign the user's browser
		$_SERVER['HTTP_USER_AGENT'] = (isSet ($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '');
	}
}



# Class containing general application support static methods
# License: GPL
# This is basically a cut-down version of http://download.geog.cam.ac.uk/projects/application/ , from version 1.2.19
class application
{
	# Function to get the base URL (non-slash terminated)
	function getBaseUrl ()
	{
		# Obtain the value, stripping off the DOCUMENT_ROOT at the start
		$baseUrl = dirname (substr ($_SERVER['SCRIPT_FILENAME'], strlen ($_SERVER['DOCUMENT_ROOT'])));
		
		# Convert backslashes to forwarded slashes if necessary
		$baseUrl = str_replace ('\\', '/', $baseUrl);
		
		# Deal with the special case of an application at top-level
		if ($baseUrl == '/') {$baseUrl = '';}
		
		# Return the value
		return $baseUrl;
	}
	
	
	# Function to send an HTTP header such as a 404; note that output buffering must have been switched on at server level
	function sendHeader ($statusCode, $location = false)
	{
		# Select the appropriate header
		switch ($statusCode) {
			
			case '301':
				header ('HTTP/1.1 301 Moved Permanently');
				header ("Location: {$location}");
				break;
				
			case 'refresh':
				$location = $_SERVER['_PAGE_URL'];
				header ('HTTP/1.1 301 Moved Permanently');
				header ("Location: {$location}");
				break;
				
			case '302':
				header ("Location: {$location}");
				break;
				
			case '404':
				header ('HTTP/1.0 404 Not Found');
				break;
				
			case '410':
				header ('HTTP/1.0 410 Gone');
				break;
		}
	}
	
	
	# Function to encode an e-mail address
	function encodeEmailAddress ($email)
	{
		# Return the string
		return str_replace ('@', '<span>&#64;</span>', $email);
	}
	
	
	# Function to dump data from an associative array to a table
	function htmlTable ($array, $tableHeadingSubstitutions = array (), $class = 'lines', $keyAsFirstColumn = true, $uppercaseHeadings = false, $allowHtml = false, $showColons = false, $addCellClasses = false, $addRowKeyClasses = false, $onlyFields = array (), $compress = false, $showHeadings = true)
	{
		# Check that the data is an array
		if (!is_array ($array)) {return $html = "\n" . '<p class="warning">Error: the supplied data was not an array.</p>';}
		
		# Return nothing if no data
		if (empty ($array)) {return '';}
		
		# Assemble the data cells
		$dataHtml = '';
		foreach ($array as $key => $value) {
			if (!$value || !is_array ($value)) {return $html = "\n" . '<p class="warning">Error: the supplied data was not a multi-dimensional array.</p>';}
			$headings = $value;
			$dataHtml .= "\n\t" . '<tr' . ($addRowKeyClasses ? ' class="' . htmlspecialchars ($key) . '"' : '') . '>';
			if ($keyAsFirstColumn) {
				$thisCellClass = ($addCellClasses ? htmlspecialchars ($key) : '') . ($keyAsFirstColumn ? ($addCellClasses ? ' ' : '') . 'key' : '');
				$dataHtml .= ($compress ? '' : "\n\t\t") . (strlen ($thisCellClass) ? "<td class=\"{$thisCellClass}\">" : '<td>') . "<strong>{$key}</strong></td>";
			}
			$i = 0;
			foreach ($value as $valueKey => $valueData) {
				if ($onlyFields && !in_array ($valueKey, $onlyFields)) {continue;}	// Skip if not in the list of onlyFields if that is supplied
				$i++;
				$data = $array[$key][$valueKey];
				$thisCellClass = ($addCellClasses ? htmlspecialchars ($valueKey) : '') . ((($i == 1) && !$keyAsFirstColumn) ? ($addCellClasses ? ' ' : '') . 'key' : '');
				$dataHtml .= ($compress ? '' : "\n\t\t") . (strlen ($thisCellClass) ? "<td class=\"{$thisCellClass}\">" : '<td>') . application::encodeEmailAddress (!$allowHtml ? htmlspecialchars ($data) : $data) . (($showColons && ($i == 1) && $data) ? ':' : '') . '</td>';
			}
			$dataHtml .= ($compress ? '' : "\n\t") . '</tr>';
		}
		
		# Construct the heading HTML
		$headingHtml  = '';
		if ($tableHeadingSubstitutions !== false) {
			$headingHtml .= "\n\t" . '<tr>';
			if ($keyAsFirstColumn) {$headingHtml .= "\n\t\t" . '<th></th>';}
			$columns = array_keys ($headings);
			foreach ($columns as $column) {
				if ($onlyFields && !in_array ($column, $onlyFields)) {continue;}	// Skip if not in the list of onlyFields if that is supplied
				$columnTitle = (empty ($tableHeadingSubstitutions) ? $column : (isSet ($tableHeadingSubstitutions[$column]) ? $tableHeadingSubstitutions[$column] : $column));
				$headingHtml .= "\n\t\t" . ($addCellClasses ? "<th class=\"{$column}\">" : '<th>') . ($uppercaseHeadings ? ucfirst ($columnTitle) : $columnTitle) . '</th>';
			}
			$headingHtml .= "\n\t" . '</tr>';
		}
		
		
		# Construct the overall heading
		$html  = "\n\n" . "<table class=\"$class\">";
		if ($showHeadings) {$html .= $headingHtml;}
		$html .= $dataHtml;
		$html .= "\n" . '</table>';
		
		# Return the HTML
		return $html;
	}
	
	
	# Function to regroup a data set into separate groups
	function regroup ($data, $regroupByColumn, $removeGroupColumn = true)
	{
		# Return the data unmodified if not an array or empty
		if (!is_array ($data) || empty ($data)) {return $data;}
		
		# Rearrange the data
		$rearrangedData = array ();
		foreach ($data as $key => $values) {
			$grouping = $values[$regroupByColumn];
			if ($removeGroupColumn) {
				unset ($data[$key][$regroupByColumn]);
			}
			$rearrangedData[$grouping][$key] = $data[$key];
		}
		
		# Return the data
		return $rearrangedData;
	}
	
	
	# Function to create an unordered HTML list
	function htmlUl ($array, $parentTabLevel = 0, $className = NULL, $ignoreEmpty = true, $sanitise = false, $nl2br = false, $liClass = false, $selected = false)
	{
		# Return an empty string if no items
		if (!is_array ($array) || empty ($array)) {return '';}
		
		# Prepare the tab string
		$tabs = str_repeat ("\t", ($parentTabLevel));
		
		# Build the list
		$html = "\n$tabs<ul" . ($className ? " class=\"$className\"" : '') . '>';
		foreach ($array as $key => $item) {
			
			# Skip an item if the item is empty and the flag is set to ignore these
			if (($ignoreEmpty) && (empty ($item))) {continue;}
			
			# Add the item to the HTML
			if ($sanitise) {$item = htmlspecialchars ($item);}
			if ($nl2br) {$item = nl2br ($item);}
			
			# Determine a class
			$class = array ();
			if ($selected && ($selected == $key)) {$class[] = 'selected';}
			if ($liClass) {
				$class[] = ($liClass === true ? $key : $liClass);
			}
			$class = ($class ? ' class="' . implode (' ', $class) . '"' : '');
			
			# Assign the HTML
			$html .= "\n$tabs\t<li" . $class . '>' . $item . '</li>';
		}
		$html .= "\n$tabs</ul>";
		
		# Return the result
		return $html;
	}
}

?>
