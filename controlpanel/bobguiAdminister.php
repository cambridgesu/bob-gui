<?php


#!# Wide logos - add max width checking or resizeTo algorithm
#!# Need to ensure that the memory_limit is enough


/*	
 *	A GUI for BOB essentially simply to do five things:
 *	
 *	- Create an entry in a table of instances with a unique <id> as the key
 *	- Write out a minimal config file using the BOB database format, with the <id> referenced
 *	- Create a <id>_voter and <id>_votes table
 *	- Enter users into the <id>_voter table, which it will need to create according to BOB's exacting standards
 *	- Make this data available at a password-protected URL which the live voting server can read
 */


/*
 *	Database needs:
 *	GRANT SELECT , INSERT , UPDATE , DELETE , CREATE , DROP ON  `votescontrolpanel` . * TO  'bobgui'@'localhost';
 */


# Class to create a GUI for BOB
require_once ('frontControllerApplication.php');
class bobguiAdminister extends frontControllerApplication
{
	# Config defaults (setting both structure and default values; NULL means that the instantiator must supply a value)
	public function defaults ()
	{
		$defaults = array (
		
			# Application name
			'applicationName' => 'Online voting system: control panel',
			
			# Organisation name
			'organisationName' => false,
			
			# Require authentication on all pages
			// 'authentication' => true,
			
			# Vote submission server (on 'read' server); not slash-terminated
			'liveServerUrl' => NULL,
			
			# Database credentials
			'database' => 'votescontrolpanel',
			'table' => 'instances',
			
			# Database installation credentials
			'installerUsername' => 'root',
			'installerPassword' => false,
			
			# Log file (from baseUrl) for auditing (if any)
			'logfile' => '/logfile.txt',
			
			# Unique ID regexp
			'uniqueIdRegexp' => '^([a-z]{3,20})$',
			
			# E-mail address used for error reports generated by bobgui itself
			'administratorEmail' => NULL,
			
			# E-mail address of the technical administrator
			'emailTech' => NULL,
			
			# Returning Officer e-mail address to which voter receipts for all ballots will go
			'emailReturningOfficerReceipts' => NULL,
			
			# Hours from now from which, and days ahead for which, a ballot can be created, and the minimum time it must be open
			'ballotFixedHoursFromOpening' => 2,
			'daysAhead' => 14,
			'minimumOpeningHours' => 4,
			'maximumOpeningDays' => 3,
			'maximumOpeningExtendedDays' => 5,	// Days that the list of groups below can have
			'maximumOpeningExtendedGroups' => array (),	// Example group IDs; use of this should be actively resisted, and reset each year
			
			# Month of the year when an academic year is split from
			'startMonth' => 9,	// Actually October is more 'correct', but 9 is safer and will catch elections just before term-start; see also http://www.cam.ac.uk/about-the-university/term-dates-and-calendars
			
			# Number of days considered 'recent' when viewing listings
			'recentDays' => 14,
			
			# Mail domain of users, beginning with @, and username regexp
			'mailDomain' => NULL,
			'usernameRegexp' => '^[a-z][a-z0-9]{1,7}$',	// As defined in Message-ID: <cEj*NC0dr@news.chiark.greenend.org.uk> to ucam.comp.misc on 060412
			
			# Maximum number of voters
			'maximumVoters'	=> 25000,
			
			# Style for this GUI
			'headerLocation'		=> '/style/header.html',
			'footerLocation'		=> '/style/footer.html',
			
			# CSS style div
			'div' => 'controlpanel',
			
			# Set to use the internal 404 page
			'page404' => false,
			
			# Runtime credentials used by BOB and put in each stub filename
			'bobDirectory' => dirname (__FILE__) . '/../../bob/',	// as an include_path
			
			# Whether to disable the availability of a RON option; enabling this option fixes 'Should Re-Open Nominations (RON) be automatically added' to 'No' internally
			'disableRonAvailability' => false,
			
			# Whether to disable the requirement for "SURNAME, Forename" format name entry
			'disableSurnameForenameRequirement' => false,
			
			# Whether BOB is set to disable the list of usernames who voted that appears on the show votes page afterwards
			'disableListWhoVoted' => false,
			
			# Counting method
			'countingMethod' => 'ERS97STV',
			
			# LGBT whitelisted ballots, e.g. array ('test-12-13-foo', ...)
			'lgbtWhitelist' => array (),
			
			# Randomisation labels, as stored-value => label; the values on the left must not be modified without changing the database and the processElectionInfoTextBlock() function below
			'randomisationInfoLabels' => array (
				'Candidate order has been automatically randomised' => 'Randomise: Candidate order should be automatically randomised',
				'Candidate order has been automatically alphabetised' => 'Alphabetise: Candidate order should be automatically alphabetised',
				'Candidates have been entered by the Returning Officer in the order shown' => 'Leave: The candidate order should remain in the order entered / Referendum only',
			),
			
			# API key for bestow endpoint
			'apiKey' => NULL,
			
			# Single organisation mode (basically removes references to manager claim form infrastructure)
			'singleOrganisationMode' => false,
			
			# Whether users can choose to disable the e-mail vote receipt in the live instance
			'voterReceiptDisableable' => false,
			
		);
		
		#!# Workaround to deal with lack of proper frontControllerApplication support for header/footer with exporting enabled, which is not yet easy to patch in
		if (isSet ($_GET['action']) && ($_GET['action'] == 'bestow')) {
			$defaults['headerLocation'] = false;
			$defaults['footerLocation'] = false;
			$defaults['div'] = false;
		}
		
		return $defaults;
	}
	
	
	# Registry of available actions
	public function actions ()
	{
		$actions = array (
			'understand' => array (
				'tab' => '<img src="/images/icons/lightbulb.png" alt="" class="icon" /> How-to',
				'description' => 'How to set up and run ballots: understand the process',
			),
			'add' => array (
				'url' => 'add.html',
				'tab' => '<img src="/images/icons/add.png" alt="" class="icon" /> Add a new ballot',
				'description' => 'Add a new ballot',
				'authentication' => true,
			),
			'selectorganisation' => array (
				'url' => 'organisation.html',
				'description' => 'Add a new ballot',
				'authentication' => true,
				'usetab' => 'add',
			),
			'administer' => array (
				'url' => 'administer.html',
				'tab' => '<img src="/images/icons/cog.png" alt="" class="icon" /> Administer ballots',
				'description' => 'Edit/remove/view forthcoming/current ballots',
				'authentication' => true,
			),
			'about' => array (
				'tab' => '<img src="/images/icons/help.png" alt="" class="icon" /> FAQ',
				'description' => false,
			),
			'security' => array (
				'tab' => '<img src="/images/icons/shield.png" alt="" class="icon" /> Security',
				'description' => false,
			),
			'submit' => array (
				'tab' => '<img src="/images/icons/comments.png" alt="" class="icon" /> Submit / view votes',
				'description' => 'Submit / view votes',
				'authentication' => false,
			),
			'feedback' => array (
			'tab' => '<img src="/images/icons/email.png" alt="" class="icon" />',
				'description' => 'Feedback',
				'authentication' => false,
			),
			'organisation' => array (
				'description' => false,
				'authentication' => true,
			),
			'organisationyear' => array (
				'description' => false,
				'authentication' => true,
			),
			'ballotmenu' => array (
				'description' => 'View/edit ballot setup',
				'authentication' => true,
			),
			'ballotedit' => array (
				'description' => 'Edit ballot details',
				'authentication' => true,
			),
			'ballotvoters' => array (
				'description' => 'Voters for a ballot',
				'authentication' => true,
			),
			'ballotview' => array (
				'description' => 'View the ballot form (sample)',
				'authentication' => true,
			),
			'ballotunderstand' => array (
				'description' => 'Understand the voting process',
				'authentication' => true,
			),
			'ballotmailfilter' => array (
				'description' => 'Set up mail filtering for the voting receipts',
				'authentication' => true,
			),
			'ballotdelete' => array (
				'description' => 'Delete ballot',
				'authentication' => true,
			),
			'bestow' => array (
				'description' => false,
				'export' => true,
				'authentication' => false,
			),
		);
		
		return $actions;
	}

	
	# Database bootstrapping
	protected function databaseStructure ()
	{
		# Define and return the database bootstrap SQL
		return $sql = "
		CREATE TABLE IF NOT EXISTS `instances` (
		  `id` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Generated globally-unique ID',
		  `url` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Computed URL location of this ballot',
		  `academicYear` varchar(5) collate utf8_unicode_ci NOT NULL COMMENT 'Computed academic year string',
		  `urlSlug` varchar(20) collate utf8_unicode_ci NOT NULL COMMENT 'Unique identifier for this ballot',
		  `provider` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Provider name',
		  `organisation` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Organisation name',
		  `title` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Title of this ballot',
		  `urlMoreInfo` varchar(255) collate utf8_unicode_ci default NULL COMMENT 'URL for more info about the ballot',
		  `frontPageMessageHtml` text collate utf8_unicode_ci default NULL COMMENT 'Optional front-page message',
		  `afterVoteMessageHtml` text collate utf8_unicode_ci default NULL COMMENT 'An extra message, if any, which people will see when they have voted',
		  `emailReturningOfficer` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'E-mail address of Returning Officer / mailbox',
		  `emailTech` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'E-mail address of Technical Administrator',
		  `officialsUsernames` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Usernames of Returning Officer + Sysadmins',
		  `randomisationInfo` enum('','Candidate order has been automatically randomised','Candidate order has been automatically alphabetised','Candidates have been entered by the Returning Officer in the order shown') collate utf8_unicode_ci default NULL COMMENT 'Candidate ordering/randomisation',
		  `organisationName` varchar(255) collate utf8_unicode_ci default NULL COMMENT 'Organisation name',
		  `organisationUrl` varchar(255) collate utf8_unicode_ci default NULL COMMENT 'Organisation URL',
		  `organisationLogoUrl` varchar(255) collate utf8_unicode_ci default NULL COMMENT 'URL of organisation''s logo',
		  `addRon` enum('','Yes','No') collate utf8_unicode_ci NOT NULL COMMENT 'Should Re-Open Nominations (RON) be automatically added as an additional candidate in each election?',
		  `electionInfo` text collate utf8_unicode_ci NOT NULL COMMENT 'Election info: Number of positions being elected; Position title; Names of candidates; each block separated by one line break',
		  `electionInfoAsEntered` text collate utf8_unicode_ci NOT NULL COMMENT 'Election info',
		  `referendumThresholdPercent` int(2) default '10' COMMENT 'Percentage of voters who must cast a vote in a referendum for the referendum to be countable',
		  `ballotStart` datetime NOT NULL COMMENT 'Start date/time of the ballot',
		  `ballotEnd` datetime NOT NULL COMMENT 'End date/time of the ballot',
		  `paperVotingEnd` datetime NULL COMMENT 'End time of paper voting, if paper voting is also taking place',
		  `instanceCompleteTimestamp` datetime default NULL COMMENT 'Timestamp for when the instance (configuration and voters list) is complete',
		  PRIMARY KEY  (`id`)
		) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
		";
	}
	
	
	# Name of RON
	var $reOpenNominations = 'Re-Open Nominations (RON)';
	
	# Supported counting methods, and their textual description
	private $supportedCountingMethods = array (
		'ERS97STV'	=> 'ERS97 STV',
		'UcamSTV'	=> 'University of Cambridge STV',
	);
	
	# Set the minimum number of fields required
	var $fieldsTypes = array (
		1 => array (
			'type'			=> 'a standard ballot without a paper vote',
			'description'	=> 'Username/e-mail only (1 column)',
			'fieldnames'	=> array ('username', ),
		),
		3 => array (
			'type'			=> 'a College-based vote with a paper vote following',
			'description'	=> 'Username/e-mail, forename, surname (3 columns)',
			'fieldnames'	=> array ('username', 'forename', 'surname', ), 
		),
		4 => array (
			'type'			=> 'a vote with voters who may be in different colleges, with a paper vote following',
			'description'	=> 'Username/e-mail, forename, surname, college (4 columns)',
			'fieldnames'	=> array ('username', 'forename', 'surname', 'unit', ), 
		),
	);
	
	
	
	# Additional default processing
	public function main ()
	{
		# Add styles
		if (!$this->exportType) {
			echo "\n" . '<style type="text/css">';
			echo $this->defaultStyles ();
			echo "\n" . '</style>';
		}
		
		# Determine whether to warn about sensitive ballots: unless the list of those who voted is revealed, the system should warn about creating e.g. LGBT-only votes
		$this->cautionAboutSensitiveBallots = (!$this->settings['disableListWhoVoted']);
		
	}
	
	
	# Define default styles
	private function defaultStyles ()
	{
		# Return the styles
		return '
			p.loggedinas {float: right; font-size: 0.91em; text-align: right;}
			ul.tabs {padding: 3px 0 4px 2px; margin-left: 0; margin-bottom: 1.5em; border-bottom: 1px solid #778; line-height: 1em;}
			ul.tabs li {list-style: none; margin: 0; display: inline;}
			ul.tabs li a {padding: 3px 0.5em; margin-left: 2px; border: 1px solid #778; border-bottom: none; background: #f7f7f7; text-decoration: none;}
			ul.tabs li a:link {color: #448;}
			ul.tabs li a:visited {color: #667;}
			ul.tabs li a:hover {color: #000; background: #eee; border-color: #227;}
			ul.tabs li.selected a {background: white; border-bottom: 1px solid white;}
			ul.tabs img {border: 0; vertical-align: bottom; padding: 0;}
			ul.tabs li select {margin-bottom: 1em;}
			ul.tabs li select option {color: #603;}
			ul.tabs li a {border-radius: 3px 3px 0 0;}
			ul.tabs li a {-moz-border-radius: 3px 3px 0 0; -webkit-border-radius: 3px 3px 0 0;} /* Vendor-specific hacks */
			
			div.graybox {border: 1px solid #ddd; padding: 10px 15px; margin: 0 10px 10px 0; background-color: #fcfcfc; overflow: hidden; /* overflow prevents floats not being enclosed - see http://gtwebdev.com/workshop/floats/enclosing-floats.php */}
			div.graybox:hover {background-color: #fafafa; border-color: #aaa;}
			div.graybox h2, div.graybox h3 {margin-top: 0.4em;}
			div.graybox p {text-align: left; margin-top: 10px;}
			/* div.graybox img {border: 1px solid #999; margin-right: 10px;} */
			
			ul.actions {margin: 0; padding: 0; float: right; display: block; margin-left: 10px;}
			ul.actions.inline {float: none; margin-top: 2em;}
			ul.actions li {list-style: none; margin-bottom: 1px;}
			ul.actions.inline li {display: inline; margin-right: 5px;}
			ul.actions li a, ul.actions li form, p.actions a, a.actions, ul.actions li span.actions {border-bottom: 0; border: 1px solid #ddd; padding: 4px 8px 2px; -moz-border-radius: 4px; -webkit-border-radius: 4px; width: 185px;}
			ul.actions li form, ul.actions li span.actions {padding: 0; width: /* 185px + 2*8px = */ 201px;}
			ul.actions li form input, ul.actions li span.actions {width: 100%; border: 0; background-color: white; text-align: left; padding: 4px 8px 2px;}
			ul.actions li a, ul.actions li form input.action, ul.actions li span.actions {display: block;}
			p.actions a, a.actions {padding: 10px 8px 2px;}
			ul.actions.inline li a {display: inline; width: auto;}
			ul.actions li a:hover, ul.actions li form:hover, a.actions:hover {border-color: #aaa;}
			ul.actions li form input:hover {cursor: pointer; cursor: hand;} /* See http://www.quirksmode.org/css/cursor.html#note */
			ul.actions li a img, a.actions img {vertical-align: top; width: 16px; height: 16px; border: 0;}
			img.icon {width: 16px; height: 16px; border: 0; vertical-align: middle;}
			
			ul.actions li a, p.actions a {border-bottom: 0; border: 1px solid #ddd; padding: 4px 8px 2px; -moz-border-radius: 4px; width: 185px;}
			ul.actions li a {display: block;}
			ul.actions.left {float: none;}
			
			.button {background-color: #eee; border-color: #eee #999 #999 #eee; border-style: solid; border-width: 2px; color: #000; padding: 2px; border-radius: 2px; -moz-border-radius: 2px; -webkit-border-radius: 2px; white-space: nowrap;}
			
			/* UltimateForm styles */
			/* Font scaling needs to be in the calling stylesheet
			.ultimateform * {font-family: verdana, arial, helvetica, sans-serif;}
			body {font-size: 69%;}
			h1 {font-size: 2.2em;}
			h2 {font-size: 1.6em;}
			h3 {font-size: 1.2em;}
			h4 {font-size: 1em;}
			p, table, input, select, textarea {font-size: 1.0em;}
			pre, code {font-size: 110%;}
			*/
			/* Headings */
			.ultimateform h2 {margin-top: 30px;}
			.ultimateform input, .ultimateform select, .ultimateform textarea, .ultimateform option, .ultimateform td.data label, .ultimateform table td p.currentfile span.filename {color: #603;}
			.ultimateform .spaced li {margin-top: 10px;}
			.ultimateform .comment {color: #888; text-align: left;}
			.ultimateform .button, .ultimateform .resetbutton {cursor: pointer; background-color: #ddd; border-color: #eee #999 #999 #eee; border-style: solid; border-width: 2px;}
			.ultimateform td.title {text-align: right; vertical-align: top;}
			.ultimateform.leftlabels td.title {text-align: left;}
			.ultimateform td.data {vertical-align: top;}
			.ultimateform td.description {text-align: left; vertical-align: top; color: #888;}
			.ultimateform span.description {color: #888; font-style: italic;}
			.ultimateform span.restriction {color: #999; font-style: italic;}
			.ultimateform table td, .ultimateform table.noborder td table td, .ultimateform table th, .ultimateform table.noborder td table th {border: 1px #eee solid; padding: 4px;}
			.ultimateform.compressed table td, .ultimateform.compressed table.noborder td table td, .ultimateform.compressed table th, .ultimateform.compressed table.noborder td table th {padding: 2px;}
			.ultimateform table td p.currentfile {margin-top: 0; margin-bottom: 2px; padding-top: 0; padding-bottom: 0;}
			.ultimateform table td p.currentfilenext {margin-top: 5px;}
			.ultimateform table {border: 0; border-collapse: collapse; border-spacing: 0;}
			.ultimateform table.noborder td {border: 0; padding: 0 16px 10px 0;}
			.ultimateform th {text-align: center;}
			.ultimateform td.results {text-align: center;}
			.ultimateform td.comment {color: #ccc; font-style: italic;}
			.ultimateform td.totals {text-align: center; color: #666;}
			.ultimateform input.refresh {background-color: transparent; border: 0; padding: 1px; color: #aaa; font-size: 1.1em;}
			/* Error box and warning highlighting */
			.ultimateform div.error {border: 1px dashed gray; padding: 5px 10px; margin-top: 5px; margin-bottom: 5px;}
			.ultimateform div.error p {margin-bottom: 5px;}
			.ultimateform div.error ul {margin-top: 0;}
			.ultimateform div.error p, div.error ul, div.error li {color: red; margin-top: 5px;}
			.ultimateform .warning, .ultimateform .error {color: red;}
			.ultimateform span.unsuccessful {display: block; border-left: 1px solid red;}
			.ultimateform span.unsuccessful input, .ultimateform span.unsuccessful select, .ultimateform span.unsuccessful textarea {margin-left: 5px;}
			.ultimateform .success {color: green;}
			.ultimateform .completion {font-weight: bold;}
			.ultimateform div.debug {border: 1px dashed gray; padding: 5px 10px; color: red; margin-top: 5px; margin-bottom: 5px;}
			/* CSS layout version to replace form tables */
			.ultimateform div.row, .ultimateform p.submit {border-top: 1px solid #e9e9e9; vertical-align: top; padding: 5px 0 10px;}
			.ultimateform div.row {clear: both;}
			.ultimateform div.row span.label {float: left; width: 27%; text-align: right; padding-right: 10px;}
			.ultimateform div.row span.restriction {display: block;} /* Forces line-break */
			.ultimateform div.row span.data {float: left; width: 40%; text-align: left; padding-right: 10px;}
			.ultimateform div.row span.description {float: left; width: 28%; text-align: left;}
			/* Fieldset */
			.ultimateform fieldset {border: 0;}
			/* On-screen layout results */
			.ultimateform table.results td.key {font-weight: bold; text-align: right;}
			.ultimateform table.results td {vertical-align: top;}
			/* Self-documentation */
			.ultimateform table.documentation th {text-align: left;}
			.ultimateform table.documentation th.displayformat, .ultimateform td.displayformat {text-align: right;}
			.ultimateform td.defaultdisplayformat {text-align: left;}
			/* Checkboxes/radiobuttons */
			.ultimateform label {vertical-align: top; margin-right: 0.5em;}	/* For the margin, ideally, input[type=radio] should be used instead, but that is poorly supported */
			.ultimateform.horizontalonly td, .ultimateform.horizontalonly th {border-left: 0; border-right: 0;}
			.ultimateform tr.checkboxes table td {border: 0; padding: 0; padding-right: 4px; vertical-align: top;}
			
			#controlpanel ul.tabs {padding-bottom: 1px;}
			#controlpanel ul.tabs li {padding-bottom: 0;}
			#controlpanel p.ballottitle {margin-bottom: 2px; font-weight: bold; color: #777;}
			#controlpanel p.ballotinfo {margin-top: 0;}
			#controlpanel ul.actions {margin-bottom: 1.2em;}
			#controlpanel ul.actions li {margin-bottom: 7px;}
			#controlpanel p.electoralroll, ul.actions li a, p.winner {background-repeat: no-repeat; background-position: 6px 5px; padding-left: 28px;}
			#controlpanel ul.actions li a {font-weight: bold;}
			#controlpanel p.electoralroll {background-image: url(/images/icons/script.png);}
			#controlpanel ul.actions li a {width: 22em;}
			#controlpanel ul.actions li.vote a {background-image: url(/images/icons/pencil.png);}
			#controlpanel ul.actions li.showvotes a {background-image: url(/images/icons/application_view_list.png);}
			#controlpanel ul.actions li a:hover {background-color: #e8c8c8;}
			#controlpanel ul.actions li a img {margin-right: 2px;}
			#controlpanel ul.actions li a.incomplete {border-style: dashed;}
			#controlpanel ul.actions li a.caution {margin-top: 1.8em;}
			#controlpanel ul.actions li a.caution:hover {background-color: red; color: white;}
			#controlpanel ul.actions.left {float: none;}
			#controlpanel table.selectlist {width: 95%;}
			#controlpanel table.selectlist img {border: 0;}
			#controlpanel table.selectlist td {padding-top: 1em; padding-bottom: 2em;}
			#controlpanel table.selectlist td.key {width: 200px; padding-right: 25px; text-align: right;}
			#controlpanel table.selectlist td.key a {border-bottom: 0;}
			#controlpanel table.selectlist td.key a:hover {background-color: transparent;}
			#controlpanel table.selectlist td.value h3 {margin-top: 0; padding-top: 0; margin-bottom: 0; padding-bottom: 0;}
			#controlpanel table.selectlist td h4 a {font-size: 1.3em; font-weight: bold;}
			#controlpanel table.selectlist td.value ul {list-style: none; margin-left: 0; padding-left: 1.5em; margin-top: 5px; padding-top: 0;}
			#controlpanel table.ballotsummary td.value {font-weight: bold;}
			#controlpanel .ultimateform table.nolines {width: 98%;}
			#controlpanel .ultimateform table.nolines td.key {width: 200px;}
			#controlpanel .ultimateform table.nolines table td {border: 0; padding: 0 5px; font-family: monospace; line-height: 1.2em;}
			#controlpanel img.right {margin-bottom: 10px;}
			#controlpanel hr.clear {clear: both; margin-top: 1em; border: 0; height: 1px;}
			#controlpanel #footerleft {width: 350px;}
			#controlpanel #footerright {color: #aaa;}
			#controlpanel #footerarea span {padding: 10px 40px;}
			#controlpanel form p.row {margin-top: 1.8em; margin-bottom: 3em;}
			#controlpanel form div p.description, form div p.widget, form div p.hint {padding: 0; margin: 0; line-height: 1.2em;}
			#controlpanel form div p.description {margin-top: 1em;}
			#controlpanel form div p.widget {margin-top: 0.3em; color: #603;}
			#controlpanel form div#form_urlSlug p.widget span.noneditable {font-weight: bold;}
			#controlpanel form div#form_urlSlug p.widget input {margin-left: 4px; margin-right: 4px;}
			#controlpanel form div div p {line-height: 1.45em;}
			#controlpanel form div p.hint {margin-top: 0.3em; margin-bottom: 2em; font-size: 0.9em; font-style: italic; color: #666;}
			#controlpanel form ul.errors li {color: red; font-style: italic;}
			#controlpanel form p.submit input {font-size: 1.2em; font-weight: bold; min-width: 15em;}
			#controlpanel form h3 {margin-top: 2em; border-bottom: 1px solid #ccc;}
			#controlpanel span.formprepend, span.formappend {color: #603;}
			#controlpanel p.row.ballotStart_time, #controlpanel p.row.ballotEnd_time, #controlpanel p.row.paperVotingEnd_time {margin-bottom: 0;}
			#controlpanel form p.row.ballotStart_date, #controlpanel form p.row.ballotEnd_date, #controlpanel form p.row.paperVotingEnd_date {margin-top: 0; position: relative; top: -0.8em;}
			#controlpanel * html #pagemenu ul li.page_item a, #pagemenu ul li.cat-item a {padding: 5px 20px;} /* IE6 layout hack */
			#controlpanel p.winner {color: #603; font-weight: bold; background-image: url(/images/icons/bullet_go.png); background-position: 5px 1px;}
			#controlpanel table.lines td.transferexplanation {padding-bottom: 1.25em;}
			#controlpanel table.regulated td.key p {width: 150px;}
			#controlpanel a.button {padding: 5px; color: black;}
			#controlpanel a.button:hover {background-color: #f7f7f7;}
			#controlpanel table.vote {border: 1px; border-collapse: collapse; border-spacing: 0px;}
			#controlpanel table.vote td, table.vote th {border: 2px #ddd solid; padding: 3px;}
			#controlpanel div.checklist {float: right; width: 40%; margin-left: 15px;}
			#controlpanel div.checklist ol li {margin-bottom: 6px;}
		';
	}
	

	# Home page
	function home ()
	{
		# Opening text
		// $html  = "\n" . '<h2>Welcome</h2>';
		$html  = "\n" . '<p>Welcome to the control panel side of the ' . ($this->settings['organisationName'] ? htmlspecialchars ($this->settings['organisationName']) . ' ' : '') . 'voting portal.</p>';
		$html .= "\n" . '<div class="graybox checklist">';
		$html .= "\n" . '<h2><p><img src="/images/icons/exclamation.png" alt="*" class="icon" /> Checklist for creating a new ballot</h2>';
		$html .= $this->checklist ();
		$html .= "\n<p>Read <a href=\"{$this->baseUrl}/understand.html\">How to set up and run ballots</a> to understand how it works.</p>";
		$html .= "\n</div>";
		$html .= "\n<h2>Ballots currently running - submit your vote</h2>";
		$html .= $this->submitHtml ();
		$html .= "\n<h2>Create/administer ballots</h2>";
		$html .= "\n<p>Here you can create a new ballot if you run a University-based group, or administer forthcoming ballots.</p>";
		$html .= "\n<ul class=\"actions left\">";
		$html .= "\n\t<li><a href=\"{$this->baseUrl}/understand.html\"><img src=\"/images/icons/lightbulb.png\" alt=\"\" class=\"icon\" /> Understand the process</a></li>";
		$html .= "\n\t<li><a href=\"{$this->baseUrl}/add.html\"><img src=\"/images/icons/add.png\" alt=\"\" class=\"icon\" /> Add a new ballot</a></li>";
		$html .= "\n\t<li><a href=\"{$this->baseUrl}/administer.html\"><img src=\"/images/icons/cog.png\" alt=\"\" class=\"icon\" /> Administer ballots</a></li>";
		$html .= "\n\t<li><a href=\"{$this->baseUrl}/about.html\"><img src=\"/images/icons/help.png\" alt=\"\" class=\"icon\" /> How it works</a></li>";
		$html .= "\n</ul>";
		$html .= "\n<p><br />Access to this system is only available via Raven, and all access is logged for security.</p>";
		
		# Show the HTML
		echo $html;
	}
	
	
	# Checklist
	private function checklist ($spaced = false)
	{
		# Get the list of provider names
		require_once ('providers.php');
		$providerApi = new providers ();
		$providerMetadata = $providerApi->getProviders ();
		$providerList = array ();
		foreach ($providerMetadata as $provider) {
			$providerList[] = "<a href=\"{$provider['baseUrl']}\">" . htmlspecialchars ($provider['name']) . '</a>';
		}
		
		# Compile the HTML
		$html  = "\n<ol" . ($spaced ? ' class="spaced"' : '') . ">
			<li>Ballots should be created by the Returning Officer (or delegate).</li>
			<li>You (the RO) must be <strong>registered as a manager</strong>" . ($this->settings['singleOrganisationMode'] ? '' : ' of your group in the ' . implode (' or ', $providerList)) . ".</li>
			<li>You must finalise the set up of the ballot <strong>at least 2 hours</strong> before it is due to open. (This is required by the security architecture.)</li>
			<li>At <strong>2 hours</strong> before a ballot opens, it <strong>cannot</strong> then be deleted or edited in any way.</li>
			<li>Your constitution must require votes to be counted using <strong>" . htmlspecialchars ($this->supportedCountingMethods[$this->settings['countingMethod']]) . "</strong>. This system cannot run first-past-the-post ballots.</li>
			<li>You must have <strong>a spreadsheet of all your voters</strong>, containing their University usernames.</li>
			<li>All voters must have a Raven account.</li>
			" . ($this->cautionAboutSensitiveBallots ? "<li>Do not use this system for elections where the only ballot is for an LGBT officer, i.e. where making the list of those who have voted would not be acceptable. (Please contact {$this->settings['administratorEmail']} to discuss this.)</li>" : '') . "
		</ol>";
		
		# Return the HTML
		return $html;
	}
	
	
	# Control panel (as distinct from frontControllerApplication admin area)
	protected function administer ()
	{
		# Start the HTML
		$html  = "\n<p>Here you can administer forthcoming ballots or view currently-open ballots.</p>";
		$html .= "\n<div class=\"graybox\">";
		$html .= "\n<p><img src=\"/images/icons/exclamation.png\" alt=\"!\" class=\"icon\" /> Ballots <strong>cannot</strong> be deleted or amended in any way from " . ($this->settings['ballotFixedHoursFromOpening'] == 1 ? 'one hour' : $this->settings['ballotFixedHoursFromOpening'] . ' hours') . " before opening or during/after a ballot.</p>";
		$html .= "\n</div>";
		$html .= "\n<h3>My ballots - closed/archived</h3>";
		$html .= "\n<p>The public <a href=\"{$this->settings['liveServerUrl']}/closed.html\"><strong>closed ballots</strong></a> page on the high-security server gives access to those now finished.</p>";
		$html .= "\n<br />\n<h3>My ballots - forthcoming/open</h3>";
		
		# Get the instances; NB this does not use the provider infrastructure at all but is a read directly from the instances table
		if (!$ballots = $this->getBallotInstances ($this->user, false, false, true, false, false, false, $forthcomingAndOpenBallotsOnly = true)) {
			$html .= "\n<p>You do not have any forthcoming/open ballots.</p>";
		} else {
			
			# Show the ballots as a listing
			$html .= $this->ballotsToListing ($ballots, 'ballotStartFormatted', true, false, $controlPanelListingMode = true);
		}
		
		# Show the HTML
		echo $html;
	}
	
	
	# How-to page
	function understand ()
	{
		# Get the text
		$html  = $this->understandText ();
		
		# Show the HTML
		echo $html;
	}
	
	
	# Help/about page
	function about ()
	{
		# Determine whether the time limit FAQ should be shown
		$showTimeLimitFaq = ($this->settings['maximumOpeningDays'] <= 7);
		
		# Assemble the HTML
		$html  = "<h2>How it works</h2>
		<p>We hope to answer all your questions here about how to set up votes, and what is and is not possible.<br />If you have any questions, please do not hesitate to <a href=\"{$this->baseUrl}/feedback.html\">contact the System Administrator</a>.</p>
		<p>Jump below to:</p>
		<ul>
			<li><a href=\"#overview\">Overview</a></li>
			<li><a href=\"#setup\">Setting up a ballot</a></li>
			<li><a href=\"#algorithm\">How the voting works</a></li>
			<li><a href=\"#split\">Paper voting ('split' voting)</a></li>
			<li><a href=\"#architecture\">Security architecture</a></li>
			<li><a href=\"#missingvoters\">Can voters who have been missed off be added mid-ballot?</a></li>
			<li><a href=\"#transparency\">Can the list of votes cast (and, where relevant, count) be kept private until the result is officially declared?</a></li>
			" . ($showTimeLimitFaq ? "<li><a href=\"#timelimit\">Why is the maximum ballot period {$this->settings['maximumOpeningDays']} days?</a></li>" : '') . "
			<li><a href=\"#feedback\">Feedback</a></li>
		</ul>
		
		<hr />
		
		<h3 id=\"overview\">Overview</h3>
		<p>The " . ($this->settings['organisationName'] ? htmlspecialchars ($this->settings['organisationName']) . ' ' : '') . "Managed Online Voting System is a system which lets organisations around the University set up online votes in a secure manner.</p>
		<p>We encourage groups to use this managed system rather than set up their own votes using content management systems etc. Online voting is a non-trivial matter to set up and run securely, and there are many pitfalls. A large amount of work has been undertaken to bring you the current system, and the voting system has been subject to code audits as well as advice from experts. The voting system also enforces best democratic practices.</p>
		<p>This system is run across two separate webservers:</p>
		<ul>
			<li><a href=\"{$this->baseUrl}/\">A setup server</a>, where you are currently are. This is the part of the system where JCRs/MCRs, Societies, and other groups can set up new ballots.</li>
			<li><a target=\"_blank\" href=\"{$this->settings['liveServerUrl']}/\">The high-security voting server</a>, where the voting actually takes place, and where upcoming/current/previous ballots are listed and where their results are shown.</li>
		</ul>
		<h3 id=\"setup\">Setting up a ballot</h3>
		<p>To set up a ballot, use the <a href=\"{$this->baseUrl}/add.html\">Add a new ballot</a> link. This will guide you through the process of specifying the settings you need, and the list of voters.</p>
		<p>Ballots must be set up and the settings finalised at least {$this->settings['ballotFixedHoursFromOpening']} hours from before it opens. After this time, there is no way to delete or amend any settings or the list of voters. This is because, by this time, the secure voting server will have pulled across the setup information and fixed it in place.</p>
		<h3 id=\"algorithm\">How the voting works</h3>
		<p>The voting will open automatically at a time specified when the vote was set up. It will be listed on the <a target=\"_blank\" href=\"{$this->settings['liveServerUrl']}/\">front page of the voting server</a> under the list of current ballots, and voters can follow the link to the relevant vote.</p>
		<p>If the voter (as authenticated via Raven) is on the electoral roll for that vote, they will be able to submit their vote by entering their choices on a form. The form prevents users submitting invalid votes (as recommended by our contact at the Electoral Reform Society).</p>
		<p>Submission of a ballot paper results in three things:</p>
		<ol class=\"spaced\">
			<li>The fact that they have vote is marked against their username in the list of voters, thus preventing them voting again.</li>
			<li>Their choices are stored in a separate list, against a unique voting 'token' (which is a short list of words.</li>
			<li>The choices and token are also e-mailed to the master mailbox for the system. This e-mail is also blind-carbon-copied to the voter. (The identity of the voter is therefore not revealed.) This e-mail creates an additional audit trail whilst still preventing matching of the choices to the voter.</li>
		</ol>
		<p>Note that at no point is there any linkage between the votes cast and which voter, except in the e-mail which the voter receives. The only scenario in which it is possible for others to tell who has voted is if only a single vote has been cast. (Additionally, of course, the System Administrators have access to the server logs, but that mirrors the role of the Returning Officer in a paper-only voting system. However, the publishing of the vote&lt;>token list provides a means to detect fraud.)</p>
		<p>At the time the vote closes, the list of votes associated with each token is published at the end of the vote, enabling people to perform a count themselves. The BOB system includes a counting implementation using the program OpenSTV. However, it is the Returning Officer's responsibility to perform an additional count if they do not trust this count implementation.</p>
		<p>The list of votes&lt;>tokens cast is published immediately the whole ballot is closed. This cannot be disabled.</p>
		<h3 id=\"split\">Paper voting ('split' voting)</h3>
		<p>Sometimes, an organisation may wish to have an online vote followed by paper voting of those who have not voted.</p>
		<p>The downside of having paper voting additional to online voting is that the system will not provide any automatic counting. It is the Returning Officer's responsibility to arrange this, possibly using a counting program such as <a target=\"_blank\" href=\"http://www.openstv.org/\">OpenSTV</a>. If this is a problem, one possibility is to have a laptop to be placed in college, replacing paper sheets entirely. Under such a setup, voting in college is effectively the same as voting from any other computer, just made conveniently available at lunchtime, etc.</p>
		<p>If paper voting really is required, this can still be achieved via the online system. The person setting up the vote can specify a third date/time (in addition to the opening and closing of electronic voting). Once the online voting has closed, the Returning Officer can log into the administrative menu to print off the electoral roll but with the names of those who have voted crossed out. Once paper voting is completed, the Returning Officer can perform the manual count, using both the list of vote&lt;>tokens and the manual ballots. However, please note that we are unable to assist with such counts.</p>
		<h3 id=\"architecture\">Security architecture</h3>
		<p>This is described on the <a href=\"{$this->baseUrl}/security.html\">Security</a> page.</p>
		
		<h3 id=\"missingvoters\">Can voters who have been missed off be added mid-ballot?</h3>
		<p>No, unfortunately not. There is no way to make changes to the configuration of the ballot on security grounds.</p>
		<p>Returning Officers should check the list of voters, and circulate the link to the ballot so that people can check they are on the electoral roll before the opening of the ballot.</p>
		<p>The only workaround is to ask the missing voter(s) to cast a paper ballot, then not declare the automatic online count as valid, to combine the paper ballot with the electronic vote list that will appear after the ballot has closed, and run a manual STV count using a spreadsheet. However, this may not be acceptable given that it could identify the voter's vote to the Returning Officer if only one such ballot is submitted on paper.</p>
		
		<h3 id=\"transparency\">Can the list of votes cast (and, where relevant, count) be kept private until the result is officially declared?</h3>
		<p>The list of votes cast becomes visible to everyone immediately after the ballot is closed. Also, the result is also shown automatically, unless paper voting is also in use. A few people have asked us whether there is any way of overriding this and keeping the list of votes confidential until they are officially revealed.</p>
		<p>This is not possible, as a direct result of the security design of the voting system. Such functionality was actively considered during the design phase of the system but it was explicitly rejected at that point.</p>
		<p>Part of the security model of the system is that the list of votes cast (but obviously not the connection with who cast them) is revealed after the closure of the election. This is so that people can verify that their vote was saved correctly, alongside other checks and balances that seek to ensure this.</p>
		<p>As a result, anyone who wants to put that same list of votes into OpenSTV (which is a free counting program) and do a calculation is fairly trivially able to do so themselves anyway. So it makes more sense to have an open result count which avoids any suspicion (however unwarranted) that the Returning Officer is doing any fiddling or trying to console a losing candidate.</p>
		<p>Effectively this almost mirrors the same situation with a paper vote where voters should, under a democratically-run system, be able to watch a manual count themselves, and often can determine by watching the votes go past who the winner is (admittedly without the same level of accuracy), prior to the official announcement of the result.</p>
		<p>The ability to check the vote is therefore a fundamental part of the security design of the voting algorithm, so this cannot be changed.</p>
		
		" . ($showTimeLimitFaq ? "<h3 id=\"timelimit\">Why is the maximum ballot period {$this->settings['maximumOpeningDays']} days?</h3>
		<p>The normal limit is currently set to {$this->settings['maximumOpeningDays']} days, for these reasons:</p>
		<ol class=\"spaced\">
			<li>Security patches and upgrades to the system can be applied more easily - long ballots make it hard for us to schedule these without having to interrupt voting.</li>
			<li>Shorter voting periods (e.g. 2 days) tend to incentivise better those in charge of issuing publicity and ensuring a good turnout.</li>
			<li>A longer period can sometimes give appearance of a lack of confidence (on the part of those running the ballot) that people will make the effort to vote.</li>
			<li>Candidates are spared from a long wait to find out if they've been elected, which could distract study.</li>
		</ol>
		<p>Three days seems to have been received as about the right limit (hundreds of ballots have taken place successfully within it), and seems to be within the scope of what most JCRs/MCRs have historically done with paper votes.</p>
		<p>If you think you have a case for extending this limit, do get in touch.</p>
		" : '') . "
		
		<h3 id=\"feedback\">Feedback</h3>
		<p>We welcome any <a href=\"{$this->baseUrl}/feedback.html\">feedback</a> on this system or this documentation, including any suggestions for improvement.</p>";
		
		# Show the HTML
		echo $html;
	}
	
	
	# Security page
	function security ()
	{
		$html  = "<h2>Security</h2>
		<p>The system is written with security in mind, with multiple layers of security.</p>
		<h3>Overview</h3>
		<p>Each ballot is actually an 'instance' of <a target=\"_blank\" href=\"https://github.com/cusu/bob\">BOB</a>, which is an online voting system created by a member of the Computer Laboratory, and which has subsequently had various improvements made by CUSU's web developer over the years, working in conjunction with the original author. (Most recently, this has included integration of a counting facility.) The code for BOB is public and can be scrutinised by voters, or by anyone who downloads the public distribution of the code.</p>
		<p>Each BOB instance is a stand-alone instance that is separate from other instances.</p>
		<p>The user interface which lists the instances, on the high-security voting server, is separate code to the BOB instances and has no ability to write files or make database changes.</p>
		<p>The high-security voting server pulls across ballot instance data on a regular basis, over an encrypted connection. It can 'ingest' only ballots in the future and not any that are in play or about to open. Indeed, it is the voting side which has the responsibility for obtaining new ballot data, rather than the setup side 'pushing' it across. Partly because the logic code of the setup and voting sides are on different machines, any potential vulnerability in the setup side exploited by a user attempting to amend an existing ballot cannot affect running or closed ballots.</p>
		<p>Ballots cannot be edited/deleted from two-hours before opening. It is because of this pulling across of data (by the voting machine from the setup side) that this two-hour lock-out time exists.</p>
		<h3>Warnings about unavoidable BOB voting process risks</h3>
		<p>The main <a href=\"https://github.com/cusu/bob\" target=\"_blank\">BOB software release page</a> discusses unavoidable BOB voting process risks.</p>
		<p>It is for the organisation running the vote to weigh up these issues, i.e. whether these aspects of online voting outweigh different issues relating to paper voting.</p>
		<h3>Full documentation</h3>
		<ul>
			<li><a href=\"{$this->baseUrl}/security.pdf\">Voting system security architecture</a></li>
		</ul>
		<p>If you have questions on any points not mentioned in the documentation, do <a href=\"{$this->baseUrl}/feedback.html\">get in touch</a> and we will update the documentation.</p>
		";
		
		# Show the HTML
		echo $html;
	}
	
	
	# Generalised support function to display errors
	protected function showErrors ($userError = false)
	{
		# Build up a list of errors if there are any
		$html = '';
		if ($this->errors) {
			if (!$userError) {
				$html .= "\n" . '<h1>Setup errors</h1>';
				$html .= "\n" . '<div class="error">';
				$html .= "\n" . '<p>The following setup errors were found, so this system cannot run. The administrator needs to correct these errors.';
				$html .= "\n\t<ul>";
				foreach ($this->errors as $error) {
					$html .= "\n\t\t<li>" . nl2br ($error) . '</li>';
				}
				$html .= "\n\t</ul>";
				$html .= "\n</div>";
			} else {
				$html .= "\n<p class=\"warning\">Apologies, a technical error occurred during this operation.</p>\n<p><strong>This has been reported to the Webmaster</strong>, who will investigate and get back to you as soon as possible.</p>";
				$subject = get_class ($this) . ' user runtime error';
				$message = "URL of page:\n" . $_SERVER['_PAGE_URL'] . "\n\nError details:\n" . implode ("\n", $this->errors) . "\n\nEncountered by user:\n" . $this->user;
				$extraHeaders = "From: " . $this->settings['administratorEmail'] . "\n" . "Reply-To: " . $this->user . '@' . $this->settings['mailDomain'];
				application::utf8mail ($this->settings['administratorEmail'], $subject, $message, $extraHeaders);
			}
		}
		
		# Explicitly close the database connection to prevent further execution (this is otherwise done implicitly by PHP anyway at script end)
		$this->closeDatabaseConnection ();
		
		# Show the result
		echo $html;
	}
	
	
	# Function to close the database explicitly
	private function closeDatabaseConnection ()
	{
		# Explicitly close the administrative database connection so that it cannot be reused
		if ($this->databaseConnection) {
			$this->databaseConnection = NULL;
		}
	}
	
	
	# Function to get instances
	private function getBallotInstances ($limitToUser = false, $specificOrganisation = false, $dateLimitation = false, $regroupByOrganisation = true, $currentBallotsOnly = false, $recentBallotsOnly = false, $closedBallotsOnly = false, $forthcomingAndOpenBallotsOnly = false)
	{
		# Add additional ordering requirements
		#!# NB Ordering by a computed column (ballotViewable) would become inefficient if the number of rows were very large
		$orderByAdditional = false;
		if ($currentBallotsOnly) {$orderByAdditional = ', ballotEnd';}
		if ($recentBallotsOnly) {$orderByAdditional = ', ballotEnd, ballotViewable';}
		if ($closedBallotsOnly) {$orderByAdditional = ', ballotStart, ballotEnd, ballotViewable';}
		if ($forthcomingAndOpenBallotsOnly) {$orderByAdditional = ', ballotStart, ballotEnd, ballotViewable';}
		if (!$orderByAdditional && $specificOrganisation) {$orderByAdditional = ', id';}	// If requesting a specific organisation with no constraints (i.e. the main listing page), take the latest created one
		
		# Build the query
		$academicYearSql = "CONCAT(
			LPAD(DATE_FORMAT(ballotStart,'%y') - IF(MONTH(ballotStart) < {$this->settings['startMonth']}, 1, 0), 2, '0'),
			'-',
			LPAD(DATE_FORMAT(ballotStart,'%y') - IF(MONTH(ballotStart) < {$this->settings['startMonth']}, 1, 0) + 1, 2, '0')
		)";
		$query = "SELECT
				*,
				{$academicYearSql} AS academicYear,
		  /* Computed date statuses - using same logic as BOB itself */
				IF(paperVotingEnd IS NULL, 0, 1) AS splitElection,
				IF((NOW() < ballotStart), 1, 0) AS beforeElection,
				IF(((NOW() >= ballotStart) && (ballotEnd >= NOW())), 1, 0) AS duringElection,
				GREATEST(ballotEnd, IFNULL(paperVotingEnd,0)) AS ballotViewable,
				IF((ballotEnd < NOW()), 1, 0) AS afterElection,
				IF((GREATEST(ballotEnd, IFNULL(paperVotingEnd,0)) < NOW()), 1, 0) AS afterBallotView,
		  /* Other computed statuses */
				IF((NOW() < DATE_SUB(ballotStart, INTERVAL {$this->settings['ballotFixedHoursFromOpening']} HOUR)), 1, 0) AS isInEditabilityPeriod,		/* Nothing is editable or deleteable from an hour before opening */
				CONCAT(LOWER(DATE_FORMAT(DATE_SUB(ballotStart, INTERVAL {$this->settings['ballotFixedHoursFromOpening']} HOUR), '%H:%i%p, ')), DATE_FORMAT(DATE_SUB(ballotStart, INTERVAL {$this->settings['ballotFixedHoursFromOpening']} HOUR), '%W, %D %M %Y')) AS editabilityPeriodEndDateTimeFormatted,
				IF(((ballotEnd < NOW()) && (TO_DAYS(NOW()) - TO_DAYS(ballotEnd) <= {$this->settings['recentDays']})), 1, 0) AS recentlyFinished,
				CONCAT(LOWER(DATE_FORMAT(ballotStart, '%H:%i%p, ')), DATE_FORMAT(ballotStart, '%W, %D %M %Y')) AS ballotStartFormatted,
				CONCAT(LOWER(DATE_FORMAT(ballotEnd, '%H:%i%p, ')), DATE_FORMAT(ballotEnd, '%W, %D %M %Y')) AS ballotEndFormatted,
				CONCAT(LOWER(DATE_FORMAT(GREATEST(ballotEnd, IFNULL(paperVotingEnd,0)), '%H:%i%p, ')), DATE_FORMAT(GREATEST(ballotEnd, IFNULL(paperVotingEnd,0)), '%W, %D %M %Y')) AS ballotViewableFormatted,
				CONCAT(DATE_FORMAT(ballotStart, '%M %Y')) AS ballotStartMonthYear,
				LOWER(DATE_FORMAT( FROM_UNIXTIME( FLOOR((UNIX_TIMESTAMP(instanceCompleteTimestamp)+(30*60))/(60*60))*(60*60) + (30*60) ) , '%H:%i%p')) AS copyToLiveTime, 	/* See: http://stackoverflow.com/questions/1639583 */
				IF(NOW() > FROM_UNIXTIME( FLOOR((UNIX_TIMESTAMP(instanceCompleteTimestamp)+(30*60))/(60*60))*(60*60) + (30*60) ), 1, '') AS copiedToLive,
		/* Flags used for special ordering */
				IF(((organisationUrl REGEXP '^http://(.+)\.cusu\.cam\.ac\.uk/$') && (organisationName REGEXP 'CUSU')), 1, 0) AS isCusu	/* This check is not ideal but will do - it is for listing ordering only */
			FROM
			{$this->dataSource}
			WHERE 1=1	/* Used so that 'AND' can be used in all cases below */
			" .
			($limitToUser ? " AND officialsUsernames REGEXP '[[:<:]]" . addslashes ($limitToUser) . "[[:>:]]'" : '') .	// Word boundaries to avoid e.g. abc12 matching abc123; see http://dev.mysql.com/doc/refman/5.1/en/regexp.html#operator_regexp
			($specificOrganisation ? " AND organisation = '" . addslashes ($specificOrganisation) . "'" : '') .
			($specificOrganisation && $dateLimitation ? " AND ((ballotStart >= '{$dateLimitation['startYear']}:{$dateLimitation['startMonthPadded']}:01 00:00:00') && (ballotStart < '{$dateLimitation['endYear']}:{$dateLimitation['endMonthPadded']}:01 00:00:00')) " : '') .	// Date limitation takes the ballotStart as the relevant election time
			($currentBallotsOnly ? ' HAVING duringElection = 1' : '') .
			($recentBallotsOnly ? ' HAVING recentlyFinished = 1' : '') .
			($closedBallotsOnly ? ' HAVING afterElection = 1' : '') .
			($forthcomingAndOpenBallotsOnly ? ' HAVING afterElection = 0' : '') .
			" ORDER BY
				isCusu DESC,	/* CUSU stuff gets listed first */
				organisationName
				{$orderByAdditional}
			;";
		
		# Get the instances
		#!# Error handling needed
		$instances = $this->databaseConnection->getData ($query, $this->dataSource);
		
		# Regroup by organisation if required
		if ($regroupByOrganisation) {
			$instances = application::regroup ($instances, 'organisation');
		}
		
		# Return the instances
		return $instances;
	}
	
	
	# Function to convert a instances array to an HTML listing; if $prefixStringBeforeDate === true, that indicates dynamic computation of current status
	private function ballotsToListing ($ballots, $dateField, $prefixStringBeforeDate = '', $singleOrganisationOnly = false, $controlPanelListingMode = false)
	{
		# Return false if none
		if (!$ballots) {return false;}
		
		# If the ballots are for a single organisation only, make the ballot list hierarchical
		if ($singleOrganisationOnly) {
			$ballots = array ($ballots);
		}
		
		# Arrange the instances
		$list = array ();
		foreach ($ballots as $organisation => $instances) {
			
			# Get the ballots for this organisation
			$ballotsThisOrganisation = array ();
			foreach ($instances as $instanceId => $instance) {
				
				# Assemble the date string
				$dateString = $prefixStringBeforeDate . $instance[$dateField];
				if ($prefixStringBeforeDate === true) {
					switch (true) {	// Dynamic computation
						case $instance['beforeElection']:
							$dateString = 'Due to open at ' . $instance['ballotStartFormatted'];
							break;
						case $instance['duringElection']:
							$dateString = 'Opened at ' . $instance['ballotStartFormatted'];
							break;
						case $instance['afterElection']:
							$dateString = 'Closed at ' . $instance['ballotEndFormatted'];
							break;
					}
				}
				
				# Compile the listing
				$ballotsThisOrganisation[$instanceId]  = "<p class=\"ballottitle\"><a href=\"{$this->baseUrl}{$instance['url']}\"><strong>" . htmlspecialchars ($instance['title']) . '</strong></a></p>';
				$ballotsThisOrganisation[$instanceId] .= "<p class=\"ballotinfo\"><span class=\"comment\">({$dateString})</span>";
				if ($controlPanelListingMode) {
					$ballotsThisOrganisation[$instanceId] .= "<br /><a href=\"{$this->baseUrl}{$instance['url']}understand.html\"><img src=\"/images/icons/lightbulb.png\" alt=\"*\" class=\"icon\" /> Understand the process</a>";
					if ($instance['isInEditabilityPeriod']) {
						if (!$instance['instanceCompleteTimestamp']) {
							$ballotsThisOrganisation[$instanceId] .= "\n<br /><span class=\"warning\"><img src=\"/images/icons/exclamation.png\" alt=\"!\" class=\"icon\" /> No voters yet - please <a href=\"{$this->baseUrl}{$instance['url']}voters.html\">add voters</a>.</span>";
						}
						$ballotsThisOrganisation[$instanceId] .= "<br /><a href=\"{$this->baseUrl}{$instance['url']}\"><img src=\"/images/icons/page_white_edit.png\" alt=\"*\" class=\"icon\" /> Details editable</a> until " . $instance['editabilityPeriodEndDateTimeFormatted'] . '.</p>';
					} else {
						$ballotsThisOrganisation[$instanceId] .= "<br /><a href=\"{$this->baseUrl}{$instance['url']}\"><img src=\"/images/icons/magnifier.png\" alt=\"*\" class=\"icon\" /> View setup</a></p>";
					}
				}
			}
			$ballotsThisOrganisation = application::htmlUl ($ballotsThisOrganisation, 3, 'spaced');
			
			# Assemble the HTML, using the latest version of the organisationName, organisationUrl and organisationLogoUrl
			//$linkStart = "<a href=\"{$this->baseUrl}{$instance['url']}/\">";
			$logoHtml = ($instance['organisationLogoUrl'] ? "<a href=\"{$this->baseUrl}/{$organisation}/\"><img id=\"{$organisation}\" src=\"{$instance['organisationLogoUrl']}\" alt=\"" . htmlspecialchars ($instance['organisationName']) . "\" height=\"80\" /></a>" : '');
			//$title = "\n\t\t\t<h3><a href=\"{$this->baseUrl}/{$organisation}/\">" . htmlspecialchars ($instance['organisationName']) . '</a>:</h3>';
			$title = "\n\t\t\t<h3>" . htmlspecialchars ($instance['organisationName']) . ':</h3>';
			
			# Compile the table
			$list[$organisation]['logo']  = $logoHtml;
			$list[$organisation]['value']  = $title . $ballotsThisOrganisation . "\n\t\t";
		}
		
		# Compile the selection table
		if ($singleOrganisationOnly) {
			$html = $ballotsThisOrganisation;
		} else {
			$html = application::htmlTable ($list, false, $class = 'selectlist spaced lines', $keyAsFirstRow = false, $uppercaseHeadings = false, $allowHtml = true, $showColons = false, $addCellClasses = true);
		}
		
		# Return the HTML
		return $html;
	}
	
	
	protected function add ()
	{
		# Force confirmation of the checklist
		$html  = "\n<p>Firstly, you must meet and accept this checklist of requirements.</p>" . $this->checklist ($spaced = true);
		$html .= "\n<br /><p><a class=\"button\" href=\"{$this->baseUrl}/organisation.html\">Yes, I can meet and accept all these requirements.</a></p>";
		echo $html;
		return false;
	}
	
	
	# Add new ballot instances; this is the only function that needs the provider API, as everything after this uses authentication based on the election officials list
	protected function selectorganisation ($selectedOrganisationId = false)
	{
		# Specify the organisation fields required
		$fieldsRequired = array ('logoLocation', 'organisationName', 'profileBaseUrl');
		
		# Get the organisation data from the provider API, or end if there is a problem retrieving the data
		require_once ('providers.php');
		$providerApi = new providers ();
		if (!$organisationsOfUser = $providerApi->getOrganisationsOfUser ($this->user, $fieldsRequired, false, $includeTestOrganisations = true)) {
			echo "<p class=\"warning\">There was a problem retrieving the list of organisations that you manage. Please try again later.</p>";
			#!# Mail admin
			return false;
		}
		
		# Compile the list of the user's organisations
		if (!$selectedOrganisationId) {
			
			# Get the provider metadata
			$providerMetadata = $providerApi->getProviders ();
			
			$html  = "\n<div class=\"graybox\">";
			$html .= "\n" . '<p><strong><img src="/images/icons/bullet_go.png" alt="*" class="icon" /> Please firstly select below the organisation for which you wish to create a new ballot.</strong></p>';
			$html .= "\n</div>";
			$html .= $this->organisationSelectionTable ($organisationsOfUser, $providerMetadata, 'add.html');
			
			# Show the HTML and end
			echo $html;
			return false;
		}
		
		# Create a flattened list version
		$organisationsOfUserFlattened = array ();
		foreach ($organisationsOfUser as $providerId => $organisations) {
			foreach ($organisations as $organisationId => $organisation) {
				$organisationsOfUserFlattened[$organisationId] = $organisation;
				# Add in fixed fields
				$organisationsOfUserFlattened[$organisationId]['id']		= $organisationId;
				$organisationsOfUserFlattened[$organisationId]['provider']	= $providerId;
			}
		}
		
		# Validate the specified organisation
		if (!isSet ($organisationsOfUserFlattened[$selectedOrganisationId])) {
			$html  = "\n<h3>Create a new ballot for an organisation</h3>";
			$html .= "\n<p>There is no such organisation, or you are not listed as a manager of it.</p>";
			
			# Show the HTML and end
			echo $html;
			return false;
		}
		
		# Run the ballot creation routine
		$this->addballot ($organisationsOfUserFlattened[$selectedOrganisationId]);
	}
	
	
	# Add a new ballot instance
	private function addballot ($organisation)
	{
		# Start the HTML
		$html  = "\n<h3>Create a new ballot for " . htmlspecialchars ($organisation['organisationName']) . '</h3>';
		
		# Create the ballot form
		if ($ballot = $this->ballotConfigurationForm ($data = array (), $html, $organisation)) {
			
			# Implement the changes
			$organisationId = $organisation['id'];
			if (!$this->implementBallot (__FUNCTION__, $organisationId, $ballot)) {
				echo $html;
				$this->showErrors (true);
				return false;
			}
			
			# Confirm success
			$html .= "\n" . '<p><strong><img src="/images/icons/tick.png" alt="*" class="icon" /> Thank you; the ballot details have been successfully recorded.</strong></p>';
			$html .= "\n" . '<h3>Stage 2: Add list of voters</h3>';
			$html .= "\n<p>You must now <a href=\"{$this->baseUrl}{$ballot['url']}voters.html\"><img src=\"/images/icons/script.png\" alt=\"\" class=\"icon\" /> add the list of voters (electoral roll)</a> in order to complete the setup process.</p>";
		}
		
		# Show the HTML
		echo $html;
	}
	
	
	# Function to create the ballot form
	private function ballotConfigurationForm ($data, &$html, $organisation = array ())
	{
		# Detect whether we are editing (rather than adding) - is editing mode if there is no organisation
		$isEditMode = ($organisation ? false : true);
		
		# If creating a new entry, map the organisation into the fixed data, then discard the organisation information
		if (!$isEditMode) {
			$data = array (
				'organisation' => $organisation['id'],
				'provider' => $organisation['provider'],
				'organisationName' => $organisation['organisationName'],
				'organisationLogoUrl' => ($organisation['logoLocation'] ? (preg_match ('|^https?://|', $organisation['logoLocation']) ? '' : 'https://' . $_SERVER['SERVER_NAME']) . $organisation['logoLocation'] : ''),
				'emailTech'	=> $this->settings['emailTech'],
				'officialsUsernames' => $this->user,
				'organisationUrl' => $organisation['profileBaseUrl'] . '/',
			);
			unset ($organisation);
		}
		
		# Get the current ballot list (this is used in a checking function)
		#!# Needs to have failure checking, to differentiate from an empty list
		$ballots = $this->getBallotInstances (false, false, false, $regroupByOrganisation = false);
		
		# Define the help text for the randomisation section
		$randomisationHelp = '
			<p><br />In the box below, you will need to enter the list of candidates in a specially-formatted way.<br />It will be checked when you submit the form.</p>
			' . ($this->settings['disableSurnameForenameRequirement'] ? '<p>You can enter the choices, one per line, either in free-form text or the <em>SURNAME, Forename</em> format shown below.</p>' : '') . '
			<p>Here are some examples and explanations:</p>
			<p><img src="' . $this->baseUrl . '/electioninfo.png" width="596" height="468" alt="Election info" border="1" /></p>
		';
		
		# Create a databinded form
		$form = new form (array (
			'databaseConnection' => $this->databaseConnection,
			'displayRestrictions' => false,
			'formCompleteText' => false,
			'display' => 'paragraphs',
			'div' => 'ultimateform',
			'nullText' => '',
			'displayColons' => true,
		));
		$form->heading ('', '<div class="graybox"><p><img src="/images/icons/exclamation.png" alt="*" class="icon" /> Ballot details can be edited only until ' . ($this->settings['ballotFixedHoursFromOpening'] == 1 ? 'one hour' : $this->settings['ballotFixedHoursFromOpening'] . ' hours') . ' before the opening time you set.<br /><strong>After that time they cannot be edited or deleted.</strong></p><p>To ' . ($isEditMode ? 'edit this ballot, amend the details' : 'create a ballot, fill in the form') . ' below.<br />Those sections marked * <em>must</em> be entered. Organisation info is not editable.<br />When you have completed the form, <strong>please check carefully</strong> then press the Submit button at the end.</p></div>');
		if ($isEditMode) {
			$form->heading ('', "<p>(If you don't want to make changes after all, return to the <a href=\"{$this->baseUrl}{$data['url']}\">Ballot editing options page</a>.)</p>");
		}
		$exclude = array ('id', 'url', 'academicYear', 'provider', 'organisation', 'emailTech', 'emailReturningOfficer', 'organisationLogoUrl', 'electionInfo', 'ballotStart', 'ballotEnd', 'paperVotingEnd', 'instanceCompleteTimestamp', );
		if ($this->settings['disableRonAvailability']) {
			$exclude[] = 'addRon';
		}
		$form->dataBinding (array (
			'database' => $this->settings['database'],
			'table' => $this->settings['table'],
			'data' => $data,
			'ordering' => array ('organisationName', 'organisationUrl', 'title', 'urlSlug', ),
			#!# May be best soon to convert this to an includeOnly list instead
			'exclude' => $exclude,
			'intelligence' => true,
			'attributes' => array (
				'organisationName' => array ('editable' => false, 'heading' => array (3 => '<img src="/images/icons/application_view_list.png" alt="" class="icon" /> Organisation info'), ),
				'organisationUrl' => array ('editable' => false, ),
				'urlSlug' => array ('editable' => (!$isEditMode), 'maxlength' => 20, 'size' => 20, 'regexp' => $this->settings['uniqueIdRegexp'], 'title' => 'Unique identifier for this ballot (a-z only, no numbers)', 'description' => "This is a identifier for this election, e.g. 'mainelection', 'committee', which must be unique for the current academic year.<br />It must be 3-20 characters, all lower-case a-z, with no numbers.<br />It will appear at the end of the URL, and cannot be changed later.", 'prepend' => "<span class=\"formprepend\">/{$data['organisation']}/&lt;academic-year&gt;/</span>", 'append' => "<span class=\"formappend\">/</span>", ),
				'title' => array ('title' => 'Title (e.g. Committee elections ' . date ('Y') . ')', 'description' => "The title that appears in listings, e.g. 'Committee elections " . date ('Y') . "'.", 'heading' => array (3 => '<img src="/images/icons/box.png" alt="" class="icon" /> Main ballot details')),
				'urlMoreInfo' => array ('regexp' => '^(http|https)://', 'title' => 'URL of page on your website giving more info about the ballot, starting http:// &nbsp;', 'description' => 'If you have a webpage giving more info about candidates, etc., enter the address starting http:// (or https://) here.', 'size' => 70, ),
				#!# size=80 being ignored
				'frontPageMessageHtml' => array ('type' => 'input', 'title' => 'Optional front-page message (not usually required)', 'description' => 'Normally leave this blank. Useful if you want to give some kind of extra message about the vote. URLs will become automatically hyperlinked.', 'size' => 80, ),
				'afterVoteMessageHtml' => array ('type' => 'input', 'description' => 'Normally leave this blank. Useful if you want to point people to a second concurrent election. URLs will become automatically hyperlinked.', 'size' => 80, ),
				'addRon' => array ('description' => "Normally 'Yes' - please check your Constitution.<br /><strong>Do not also</strong> add RON in the explicit list of candidates below."),
				'officialsUsernames' => array ('title' => 'Username(s) of the Returning Officer(s)', 'heading' => array (3 => '<img src="/images/icons/user_suit.png" alt="" class="icon" /> Returning Officer'), 'description' => "These people will have login rights.<br />This list must include yourself at the start.<br />If more than one, separate by comma/space between each, e.g. abc12, xyz99.", ),
				'randomisationInfo' => array ('required' => true, 'heading' => array (3 => '<img src="/images/icons/group.png" alt="" class="icon" /> Candidates', ), 'description' => 'What should happen with the ordering of the candidates you enter below. (This setting is ignored for referenda.)', 'values' => $this->settings['randomisationInfoLabels']),
				'electionInfoAsEntered' => array ('heading' => array ('' => $randomisationHelp, ), 'cols' => 100, 'rows' => 20, 'title' => 'Election info (see example above, which shows how to enter this)', 'description' => 'See the diagram above. Precise checks will be done.', ),
				'referendumThresholdPercent' => array ('title' => 'If you are including a referendum, percentage of voters who must cast any vote for the referendum to be countable', ),
			),
		));
		$form->heading (3, '<img src="/images/icons/clock_red.png" alt="" class="icon" /> Times and dates');
		$form->heading ('p', 'Ballots can be created starting ' . ($this->settings['ballotFixedHoursFromOpening'] == 1 ? 'one hour' : $this->settings['ballotFixedHoursFromOpening'] . ' hours') . ' from now, up to ' . $this->settings['daysAhead'] . ' days ahead, to run for a maximum period of ' . ($this->settings['maximumOpeningDays'] == 1 ? 'one day' : "{$this->settings['maximumOpeningDays']} days") . '.');
		$fields = array ('ballotStart' => '<strong>Start</strong> time/date of the ballot', 'ballotEnd' => '<strong>Closing</strong> time/date of the ballot', 'paperVotingEnd' => '<strong>If</strong> you need to have paper voting, enter the time/date when the paper voting closes.<br /><strong>Bear in mind</strong> that this will require the need for voters to be added manually to a spreadsheet.', );
		$preformattedTimes = $this->preformattedTimes ();
		foreach ($fields as $field => $label) {
			$daysToShow = $this->settings['daysAhead'] + ($field == 'ballotStart' ? 0 : $this->settings['maximumOpeningDays']);
			$preformattedDates = $this->preformattedDates ($daysToShow);
			$form->select (array (
				'name'					=> $field . '_time',
				'title'					=> $label,
				'values'				=> $preformattedTimes,
				'prepend'				=> 'Time: ',
				'required'				=> ($field != 'paperVotingEnd'),
				'default'				=> ($isEditMode && isSet ($data[$field . '_time']) ? $data[$field . '_time'] : ''),
			));
			$form->select (array (
				'name'					=> $field . '_date',
				'title'					=> false,
				'values'				=> $preformattedDates,
				'prepend'				=> 'Date: ',
				'required'				=> ($field != 'paperVotingEnd'),
				'default'				=> ($isEditMode && isSet ($data[$field . '_date']) ? $data[$field . '_date'] : ''),
			));
		}
		$form->validation ('all', array ('paperVotingEnd_date', 'paperVotingEnd_time'));	// Ensure that, if either are filled in, both are filled in
		$form->heading (3, '<img src="/images/icons/script.png" alt="" class="icon" /> Electoral roll (list of voters)');
		$form->heading ('p', 'The list of voters will be added on the next page of this form.');
		
		# Do additional sanity checks on the data prior to validation
		if ($unfinalisedData = $form->getUnfinalisedData ()) {
			$error = array ();
			
			# Ensure the election id is unique
			if (!$isEditMode) {
				$currentIds = array_keys ($ballots);
				if (!$this->uniqueIdValid ($unfinalisedData, $data['organisation'], $currentIds, $error['urlSlug'])) {
					$form->registerProblem ('urlSlug', $error['urlSlug']);
				}
			}
			
			# Ensure the extra message has no HTML
			if (!$this->officialsUsernamesValid ($unfinalisedData['officialsUsernames'], $error['officialsUsernames'])) {
				$form->registerProblem ('officialsUsernames', $error['officialsUsernames']);
			}
			
			# Check that specific fields do not have HTML in
			$fields = array (
				'title' => 'main ballot title',
				'urlMoreInfo' => 'webpage URL',
				'frontPageMessageHtml' => 'front page message',
				'afterVoteMessageHtml' => 'after-vote extra message',
				'electionInfoAsEntered' => 'election info block',
			);
			foreach ($fields as $field => $description) {
				if (!$this->messageStringValid ($unfinalisedData[$field], $error[$field], $description)) {
					$form->registerProblem ($field, $error[$field]);
				}
			}
			
			# Ensure the election info is validly formatted
			if (!$electionInfo = $this->parseElectionInfo ($unfinalisedData['electionInfoAsEntered'], $error['electionInfoAsEntered'])) {
				$form->registerProblem ('electionInfoAsEntered', $error['electionInfoAsEntered']);
			}
			
			# Prevent single-ballot LGBT-only votes if required
			if ($this->cautionAboutSensitiveBallots) {
				if (count ($electionInfo) == 1) {
					if (strlen ($unfinalisedData['urlSlug'])) {
						$lgbtRegexp = '/(lgbt|lbgt|lgb|lbg|l g b t|l b g t|l g b|l b g|l-g-b-t|l-b-g-t|l-g-b|l-b-g|lesbigay|lesbian|transgen|transex)/';
						foreach ($electionInfo as $index => $election) {
							if (preg_match ($lgbtRegexp, strtolower ($election['title'])) || preg_match ($lgbtRegexp, strtolower ($unfinalisedData['title']))) {
								$lgbtCodeAcademicYear = $this->academicYearFromStartDate (($unfinalisedData['ballotStart_date']) ? $unfinalisedData['ballotStart_date'] : date ('Y-m-d'));
								$lgbtCode = htmlspecialchars ("{$data['organisation']}-" . $lgbtCodeAcademicYear . "-{$unfinalisedData['urlSlug']}");
								if (!in_array ($lgbtCode, $this->settings['lgbtWhitelist'])) {
									$form->registerProblem ('electionInfoAsEntered', "It appears that you are attempting to create a ballot where only an LGBT officer is being elected. The system does not normally allow this, because the voter list is revealed after the election (thereby forcing people to reveal their sexuality, or creating a potential implication, if they wish to vote). If your Committee has discussed the implications of this and you wish to go ahead, please <strong>e-mail {$this->settings['administratorEmail']} to request that this ballot be whitelisted</strong>, quoting this code: <strong>&lt;{$lgbtCode}&gt;</strong> .");
								}
							}
						}
					}
				}
			}
			
			# Ensure the election info is validly formatted
			if (!$this->timesDatesValid ($unfinalisedData, $data['organisation'], $timesDatesValidError, $fieldname)) {
				$error[$fieldname] = $timesDatesValidError;
				$form->registerProblem ('timesDatesValidError', $error[$fieldname], $fieldname);
			}
		}
		
		# Process the form
		if (!$result = $form->process ($html)) {return false;}
		
		# Compile the data further, starting with merging the pre-supplied data in
		if (!$isEditMode) {
			$result = array_merge ($result, $data);		// Pre-supplied data ($data) will overwrite the submitted form data ($result), effectively ignoring the 'hidden' fields
		}
		
		# Ensure the provider is in the output
		$result['provider'] = $data['provider'];
		
		# Make links clickable
		if (strlen ($result['frontPageMessageHtml'])) {
			$result['frontPageMessageHtml'] = '<p>' . application::makeClickableLinks ($result['frontPageMessageHtml']) . '</p>';	// Convert to being a paragraph
		}
		if (strlen ($result['afterVoteMessageHtml'])) {
			$result['afterVoteMessageHtml'] = '<p>' . application::makeClickableLinks ($result['afterVoteMessageHtml']) . '</p>';	// Convert to being a paragraph
		}
		
		# Obtain the academic year string, e.g. 08-09 if the ballot start date were 2009-04-18
		$academicYearString = $this->academicYearFromStartDate ($result['ballotStart_date']);
		
		# Pre-compute the academic year, id, and url; this is better than having SQL statements continually re-computing these as generated fields
		$result['academicYear'] = $academicYearString;
		$result['id'] = $data['organisation'] . '-' . $academicYearString . '-' . $result['urlSlug'];
		$result['url'] = '/' . $data['organisation'] . '/' . $academicYearString . '/' . $result['urlSlug'] . '/';
		
		# Compile the ballot times, and remove their component parts
		$result['ballotStart'] = $result['ballotStart_date'] . ' ' . $result['ballotStart_time'];
		$result['ballotEnd'] = $result['ballotEnd_date'] . ' ' . $result['ballotEnd_time'];
		$result['paperVotingEnd'] = ($result['paperVotingEnd_date'] ? $result['paperVotingEnd_date'] . ' ' . $result['paperVotingEnd_time'] : NULL);	//  Set as NULL if no paper voting
		unset ($result['ballotStart_date'], $result['ballotStart_time'], $result['ballotEnd_date'], $result['ballotEnd_time'], $result['paperVotingEnd_date'], $result['paperVotingEnd_time']);
		
		# Separate usernames by space
		$result['officialsUsernames'] = implode (' ', preg_split ("/[\s,]+/", $result['officialsUsernames']));
		
		# Add in the master Returning Officer e-mail
		$result['emailReturningOfficer'] = $this->settings['emailReturningOfficerReceipts'];
		
		# Fix addRon if required
		if ($this->settings['disableRonAvailability']) {
			$result['addRon'] = 'No';
		}
		
		# Create a copy of the ballot data, randomising if necessary, which will be stored as the actual version used
		$result['electionInfo'] = $this->processElectionInfoTextBlock ($result);
		
		# Return the result
		return $result;
	}
	
	
	# Wrapper function to reorder/randomise the election info (list of candidates for each ballot) if required
	private function processElectionInfoTextBlock ($result)
	{
		# Do the re-ordering (including adding RON if required)
		$electionInfo = $this->reorderElectionInfo ($result);
		
		# Compile the string
		$string  = array ();
		foreach ($electionInfo as $index => $election) {
			$string[$index]  = $election['positions'] . "\n";
			$string[$index] .= $election['title'] . "\n";
			$string[$index] .= implode ("\n", $election['candidates']);
		}
		
		# Compile the strings back into a single block
		$string = implode ("\n\n", $string);	// One line between each one
		
		# Return the result, which will be the value used for the actual vote
		return $string;
	}
	
	
	# Function to do the re-ordering of the election info text block (including adding RON if required)
	private function reorderElectionInfo ($result)
	{
		# Parse the election info (again)
		$electionInfo = $this->parseElectionInfo ($result['electionInfoAsEntered']);
		
		# Loop through each election
		foreach ($electionInfo as $index => $election) {
			
			# Make no change if a referendum
			if (!$electionInfo[$index]['isReferendum']) {
				
				# Switch between modes
				switch ($result['randomisationInfo']) {
					
					# Randomise if required
					case 'Candidate order has been automatically randomised':
						shuffle ($electionInfo[$index]['candidates']);
						break;
						
					# Alphabetise if required
					case 'Candidate order has been automatically alphabetised':
						#!# Probably doesn't take account of UTF-8, e.g. an umlaut at the start of a name
						natcasesort ($electionInfo[$index]['candidates']);
						break;
						
					default:	// i.e. 'Candidates have been entered by the Returning Officer in the order shown'
						// No action
						break;
				}
				
				# Add RON if required
				if ($result['addRon'] == 'Yes') {
					$electionInfo[$index]['candidates'][] = $this->reOpenNominations;
				}
			}
			
			# Add 'Referendum: ' to start if a referendum
			if ($electionInfo[$index]['isReferendum']) {
				$electionInfo[$index]['title'] = 'Referendum: ' . $electionInfo[$index]['title'];
			}
		}
		
		# Return the result
		return $electionInfo;
	}
	
	
	
	# Function to determine if a ballot exists at the current URL within the control panel, that the user has rights to and which is currently editable
	private function editableBallotExistsHere ($checkInEditabilityPeriod = true)
	{
		# Check all parameters are present
		if (!isSet ($_GET['item']) || !isSet ($_GET['year']) || !isSet ($_GET['ballotname'])) {
			$this->page404 ();
			return false;
		}
		
		# Get current ballots of the user for this organisation
		if (!$currentBallots = $this->getBallotInstances ($this->user, $_GET['item'], $dateLimitation = false, $regroupByOrganisation = false)) {
			#!# Create a new ballot option should not appear on the delete screen!
			echo "\n<p>There are no editable ballots for this organisation.</p>\n<p>Please check the URL and try again, or <a href=\"{$this->baseUrl}/add.html\">create a new ballot</a>.</p>";
			return false;
		}
		
		# Build the key (e.g. the URL /organisationname/08-09/main/ becomes organisationname-08-09-main) and check if it is present in the list
		$key = "{$_GET['item']}-{$_GET['year']}-{$_GET['ballotname']}";
		if (!isSet ($currentBallots[$key])) {
			echo "\n<p>There is no such ballot. Please check the URL and try again, or <a href=\"{$this->baseUrl}/add.html\">create a new ballot</a>.</p>";
			return false;
		}
		
		# Ensure it is in the editability period
		if ($checkInEditabilityPeriod) {
			if (!$currentBallots[$key]['isInEditabilityPeriod']) {
				echo "\n<p>The configuration of this <a href=\"{$this->settings['liveServerUrl']}{$currentBallots[$key]['url']}\">ballot</a> is no longer editable, nor can it be deleted.</p>";
				echo "\n<p>(Editability finished at {$currentBallots[$key]['editabilityPeriodEndDateTimeFormatted']}.)</p>";
				return false;
			}
		}
		
		# Return the ballot
		return $currentBallots[$key];
	}
	
	
	# Index to the per-ballot settings (edit and voters)
	protected function ballotmenu ($organisationId)
	{
		# End if there is no such ballot or the user has no rights to it
		#!# Should have a link to public instance if it exists but is not editable now
		if (!$ballot = $this->editableBallotExistsHere ($checkInEditabilityPeriod = false)) {return false;}
		
		# Add the metadata for this ballot
		$html  = "\n<p>Below you can view" . ($ballot['isInEditabilityPeriod'] ? '/edit the configuration or voter list' : ' the details') . " for this ballot:</p>";
		$html .= $this->ballotMetadataTable ($ballot);
		
		# Get the total number of voters
		$totalVoters = $this->getTotalVoters ($ballot);
		
		# Links
		if ($ballot['isInEditabilityPeriod']) {
			$html .= "\n<h3>Setup</h3>";
			if ($totalVoters) {		// $ballot['instanceCompleteTimestamp'] could also be used, but we need the $totalVoters below anyway, and it's a more direct check
				$html .= "\n<div class=\"basicbox\">";
				if ($ballot['copiedToLive']) {
					$html .= "\n<p><img src=\"/images/icons/tick.png\" alt=\"\" class=\"icon\" /> Now that you have finished setting up the ballot, you should e-mail your voters,<br />and give them the web address (URL) of <strong>the public ballot page</strong>, i.e.:<br /><a href=\"{$this->settings['liveServerUrl']}{$ballot['url']}\">{$this->settings['liveServerUrl']}{$ballot['url']}</a></p>";
					if ($ballot['organisation'] == 'test') {
						$html .= "\n<p>Note that this test ballot will not appear in the main ballot listings &ndash; only in the <a href=\"{$this->settings['liveServerUrl']}/test/\">Test Society ballot listings</a>.</p>";
					}
				} else {
					$html .= "\n<p><img src=\"/images/icons/clock.png\" alt=\"\" class=\"icon\" /> At <strong>{$ballot['copyToLiveTime']}</strong>, the vote configuration will be copied to the high-security voting server.</p>";
					$html .= "\n<p><strong>After that time</strong>, you should e-mail your voters, and give them the web address (URL) of <strong>the public ballot page</strong>.<br /><strong>This will be:</strong> {$this->settings['liveServerUrl']}{$ballot['url']}</p>";
				}
				$html .= "\n</div>";
				$html .= "\n<br />";
			} else {
				$html .= "\n<p class=\"warning\"><img src=\"/images/icons/exclamation.png\" alt=\"!\" class=\"icon\" /><strong> You have not completed setting up this ballot yet - please <a href=\"{$this->baseUrl}{$ballot['url']}voters.html\">add voters</a>.</strong></p>";
			}
		}
		$understandLink = "\n\t<li><a href=\"{$this->baseUrl}{$ballot['url']}understand.html\"><img src=\"/images/icons/lightbulb.png\" alt=\"\" class=\"icon\" /> Understand the process</a></li>";
		$liveVotingLink = '';
		if ($ballot['copiedToLive']) {
			$liveVotingLink = "\n\t<li><a href=\"{$this->settings['liveServerUrl']}{$ballot['url']}\"><img src=\"/images/icons/bullet_go.png\" alt=\"\" class=\"icon\" /> Go to the live voting page</a></li>";
		}
		$html .= "\n<ul class=\"actions left\">";
		if ($ballot['isInEditabilityPeriod']) {
			$html .= "\n\t<li><a href=\"{$this->baseUrl}{$ballot['url']}edit.html\"><img src=\"/images/icons/page_white_edit.png\" alt=\"\" class=\"icon\" /> Edit configuration</a></li>";
			$html .= "\n\t<li><a href=\"{$this->baseUrl}{$ballot['url']}voters.html\"><img src=\"/images/icons/script.png\" alt=\"\" class=\"icon\" /> Voters (currently: " . ($totalVoters ? $totalVoters : 'NONE') . ")</a></li>";
			$html .= "\n\t<li><a" . ($totalVoters ? '' : ' class="incomplete"') . " href=\"{$this->baseUrl}{$ballot['url']}view.html\"><img src=\"/images/icons/magnifier.png\" alt=\"\" class=\"icon\" /> Check the ballot form</a></li>";
			$html .= $understandLink;
			$html .= $liveVotingLink;
			$html .= "\n\t<li><a class=\"caution\" href=\"{$this->baseUrl}{$ballot['url']}delete.html\"><img src=\"/images/icons/cross.png\" alt=\"\" class=\"icon\" /> Delete this ballot &hellip;</a></li>";
		} else {
			$html .= "\n<h3>Options</h3>";
			$html .= $understandLink;
			$html .= $liveVotingLink;
		}
		$html .= "\n</ul>";
		
		# Show the HTML
		echo $html;
	}
	
	
	# Function to get the total number of voters (but not their details)
	private function getTotalVoters ($ballot)
	{
		# Derive the table name and return the list of voters
		$voterTable = $ballot['id'] . '_voter';
		$totalVoters = $this->databaseConnection->getTotal ($this->settings['database'], $voterTable);
		return $totalVoters;
	}
	
	
	# Function to get the list of voters
	private function getVotersList ($ballot)
	{
		# Determine the required number of fields, i.e. what structure of data to paste in
		$requiredFields = $this->requiredFields ($ballot);
		
		# Obtain the fieldnames
		$fieldnames = $this->fieldsTypes[$requiredFields]['fieldnames'];
		
		# Derive the table name and return the list of voters
		$voterTable = $ballot['id'] . '_voter';
		$voters = $this->databaseConnection->select ($this->settings['database'], $voterTable, array (), $fieldnames, true, $orderBy = 'username');
		return $voters;
	}
	
	
	# Function to get a cloned list of voters from the last ballot the user completed setting up for this organisation
	private function cloneVotersListFromLast ($ballot, &$voterListCloned = false)
	{
		# Determine the required number of fields the current ballot requires, i.e. what structure of data to paste in
		$requiredFields = $this->requiredFields ($ballot);
		
		# Get the last completed entry, or end
		if (!$lastBallot = $this->databaseConnection->selectOne ($this->settings['database'], $this->settings['table'], array ('provider' => $ballot['provider'], 'organisation' => $ballot['organisation']), array (), false, 'instanceCompleteTimestamp DESC', 1)) {return false;}
		
		# Obtain the fieldnames
		$fieldnames = $this->fieldsTypes[$requiredFields]['fieldnames'];
		
		# Derive the table name and obtain the list of voters; if there are none, treat this as non-cloned
		$voterTable = $lastBallot['id'] . '_voter';
		if (!$voters = $this->databaseConnection->select ($this->settings['database'], $voterTable, array (), $fieldnames, true, $orderBy = 'username')) {return false;}
		
		# Pass back by reference the metadata of the chosen ballot, so that the interface can show the user details of that ballot
		$voterListCloned = $lastBallot;
		
		# Return the list of voters
		return $voters;
	}
	
	
	# Function to create a short metadata table for a ballot
	private function ballotMetadataTable ($ballot)
	{
		# Prepare and return HTML for a table
		$table = array ('Organisation' => $ballot['organisationName'], 'Academic year' => $ballot['academicYear'], 'Unique identifier' => $ballot['urlSlug'], 'Title' => $ballot['title']);
		$html  = application::htmlTableKeyed ($table, array (), false, 'lines ballotsummary');
		return $html;
	}
	
	
	# Edit an existing ballot instance
	protected function ballotedit ($organisationId)
	{
		# End if there is no such ballot or the user has no rights to it
		if (!$ballot = $this->editableBallotExistsHere ()) {return false;}
		
		# Start the HTML
		$html  = '';
		
		# Convert ballot start/end and paperVotingEnd to the uncompiled date/time pairs
		list ($ballot['ballotStart_date'], $ballot['ballotStart_time']) = explode (' ', $ballot['ballotStart']);
		list ($ballot['ballotEnd_date'], $ballot['ballotEnd_time']) = explode (' ', $ballot['ballotEnd']);
		if ($ballot['paperVotingEnd']) {
			list ($ballot['paperVotingEnd_date'], $ballot['paperVotingEnd_time']) = explode (' ', $ballot['paperVotingEnd']);
		} else {
			$ballot['paperVotingEnd_date'] = '';
			$ballot['paperVotingEnd_time'] = '';
		}
		
		# Other changes to the data
		$ballot['frontPageMessageHtml'] = strip_tags ($ballot['frontPageMessageHtml']);
		$ballot['afterVoteMessageHtml'] = strip_tags ($ballot['afterVoteMessageHtml']);
		
		# Hand off to the data manipulation function
		if ($ballot = $this->ballotConfigurationForm ($ballot, $html)) {
			
			# Implement the changes
			if (!$this->implementBallot (__FUNCTION__, $organisationId, $ballot)) {
				echo $html;
				$this->showErrors (true);
				return false;
			}
			
			# Confirm success
			$html .= "\n" . '<p><strong><img src="/images/icons/tick.png" alt="*" class="icon" /> The configuration has been updated. The changes will appear on the live voting server within the next hour.</strong></p>';
			$html .= "\n<p>You can now <a href=\"{$this->baseUrl}{$ballot['url']}\"><img src=\"/images/icons/bullet_go.png\" alt=\"\" class=\"icon\" /> return to the control panel page for this ballot</a> to check things over.</p>";
		}
		
		# Show the HTML
		echo $html;
	}
	
	
	# Add voters to a created ballot
	protected function ballotvoters ($organisationId)
	{
		# End if there is no such ballot or the user has no rights to it
		if (!$ballot = $this->editableBallotExistsHere ()) {return false;}
		
		# Determine the voters table
		$voterTable = $ballot['id'] . '_voter';
		
		# Start the HTML
		$html  = '';
		
		# Start the form
		$form = new form (array (
			'databaseConnection' => $this->databaseConnection,
			'displayRestrictions' => false,
			'formCompleteText' => false,
			'display' => 'paragraphs',
			'div' => 'ultimateform',
		));
		
		# Give a link back to the menu
		$form->heading ('', "\n<p>Note: you can access this later via the <a href=\"{$this->baseUrl}{$ballot['url']}\">Ballot editing options page</a>, which is accessible from the <a href=\"{$this->baseUrl}/administer.html\">Control panel</a>.</p>");
		
		# Determine the required number of fields, i.e. what structure of data to paste in
		$requiredFields = $this->requiredFields ($ballot);
		
		# Obtain the current list of voters
		#!# Consider whether a flag is needed for when a present list has been wiped because it is unsufficient for this type of ballot
		$currentVoters = $this->getVotersList ($ballot);
		
		# If there are no current voters, clone from the last ballot the user set up
		$voterListCloned = false;
		if (!$currentVoters) {
			$currentVoters = $this->cloneVotersListFromLast ($ballot, $voterListCloned);
		}
		
		# Format the list of voters if any
		$votersListFormatted = '';
		if ($currentVoters) {
			foreach ($currentVoters as $username => $fields) {
				unset ($fields['voted']);
				$votersListFormatted .= implode ("\t", $fields) . "\n";
			}
		}
		
		# Create the form, with the voter entry description at the start
		$form->heading ('', "
			<h3>Copy voters from a spreadsheet</h3>
			<p><strong><img src=\"/images/icons/exclamation.png\" alt=\"!\" class=\"icon\" /> Make sure you save and paste from a spreadsheet - you may need it later.</strong></p>
			<p>Your vote is for {$this->fieldsTypes[$requiredFields]['type']}. Therefore:<br />Paste from a spreadsheet containing: {$this->fieldsTypes[$requiredFields]['description']}:</p>
			<p><img src=\"{$this->baseUrl}/{$requiredFields}usernames.png\" alt=\"Example of what to copy from your spreadsheet\" height=\"144\" border=\"1\" /></p>
			<ul>
				<li><strong>Do not include headings</strong> at the top of the columns when pasting in.</li>
				" . ($requiredFields > 1 ? "<li>Column order must be <strong>in the order shown</strong>, i.e. {$this->fieldsTypes[$requiredFields]['description']}.</li>" : '') . "
				<li>The usernames can be e-mails instead, but they must end <strong>exactly</strong> @{$this->settings['mailDomain']} .</li>
				<li>The list of usernames/people does <strong>not</strong> have to be in alphabetical order.</li>
				" . ($ballot['paperVotingEnd'] ? '<li>Include usernames of <strong>only those people eligible to vote online</strong> - do not include people who can only vote on paper.</li>' : '') . "
			</ul>
		");
		if ($voterListCloned) {
			$form->heading ('', "<p class=\"warning\">A suggested list of " . count ($currentVoters) . " voters has been pre-filled, as a starting point, copied from the <a target=\"_blank\" title=\"[Link opens in a new tab/window]\" href=\"{$this->settings['liveServerUrl']}{$voterListCloned['url']}\">last ballot ('" . htmlspecialchars ($voterListCloned['title']) . "')</a> that was set up (completely) for this organisation.</p>\n<p class=\"warning\"><strong>The list below has not yet been saved.</strong>");
		}
		$form->textarea (array (
			'name'					=> 'voters',
			'title'					=> ($ballot['paperVotingEnd'] ? 'List of online voters' : 'List of voters'),
			'required'				=> true,
			'cols'					=> 120,
			'rows'					=> 30,
			'default'				=> $votersListFormatted,
		));
		
		# Do additional sanity checks on the data prior to validation
		if ($unfinalisedData = $form->getUnfinalisedData ()) {
			
			# Get the voters list
			$voters = explode ("\n", $unfinalisedData['voters']);
			if ($voters) {
				
				# Loop through each voter
				$faultyRows = array ();
				$usernames = array ();
				$invalidUsernames = array ();
				$mailDomainQuoted = preg_quote ('@' . $this->settings['mailDomain']);
				foreach ($voters as $index => $voter) {
					$voter = trim ($voter);
					
					# Ensure the number of fields matches the number of tabs + 1
					if ($requiredFields != (substr_count ($voter, "\t") + 1)) {
						$faultyRows[] = ($index + 1);	// Add 1, as humans start counting at 1
						continue;	// Skip to next
					}
					
					# Add the username (first column) to a list of usernames for uniqueness-checking later
					$voter = explode ("\t", $voter);
					$username = $this->cleanUsername ($voter[0], $mailDomainQuoted);
					$usernames[] = $username;
					
					# Validate usernames, which also ensures they are not empty
					if (!preg_match ("/{$this->settings['usernameRegexp']}/D", $username)) {
						$invalidUsernames[] = $username;
					}
				}
				
				# If there are faulty rows, register the problem
				if ($faultyRows) {
					$total = count ($faultyRows);
					if ($total > 5) {
						$text = "{$total} rows";
					} else {
						$text = ($total == 1 ? 'Row ' : 'Rows ') . implode (', ', $faultyRows);
					}
					$description = $text . ' in the list of voters ' . (count ($faultyRows) == 1 ? 'does not' : 'do not') . ' match the specification noted below.';
					$form->registerProblem ('voters', $description);
				}
				
				# If there are duplicate usernames, register the problem
				if ($duplicateUsernames = application::array_duplicate_values ($usernames)) {
					if (count ($duplicateUsernames) <= 5) {
						$description = (count ($duplicateUsernames) == 1 ? 'The username ' : 'Usernames ') . htmlspecialchars (implode (', ', $duplicateUsernames)) . ' in the list of voters ' . (count ($duplicateUsernames) == 1 ? 'has been' : 'have been') . ' duplicated.';
					} else {
						$description = count ($duplicateUsernames) . ' of the usernames in the list of voters have been duplicated.';
					}
					$form->registerProblem ('voters', $description);
				}
				
				# Prevent empty usernames
				if ($invalidUsernames) {
					if (count ($invalidUsernames) <= 20) {
						$description = (count ($invalidUsernames) == 1 ? 'The username ' : 'Usernames ') . htmlspecialchars (implode (', ', $invalidUsernames)) . (count ($invalidUsernames) == 1 ? 'does not' : 'do not') . ' match the username pattern.';
					} else {
						$description = count ($invalidUsernames) . ' usernames did not match the username pattern.';
					}
					$form->registerProblem ('voters', $description);
				}
				
				# Ensure there are between 2 and $this->settings['maximumVoters'] voters
				$totalVoters = count ($voters);
				if ($totalVoters == 1) {
					$form->registerProblem ('toomanyvoters', 'There must be at least two voters.');
				} else {
					if ($totalVoters > $this->settings['maximumVoters']) {
						$form->registerProblem ('voters', 'A maximum of ' . number_format ($this->settings['maximumVoters']) . " voters is allowed, and you submitted {$totalVoters}.");
					}
				}
			}
		}
		
		# Process the form
		if ($result = $form->process ($html)) {
			
			# Process the list of voters
			$voters = $this->votersFromText ($result['voters'], $requiredFields);
			
			# Implement the changes
			if (!$this->implementBallot (__FUNCTION__, $organisationId, $ballot, $voters)) {
				echo $html;
				$this->showErrors (true);
				return false;
			}
			
			# Confirm success
			$html .= "\n" . '<p><strong><img src="/images/icons/tick.png" alt="*" class="icon" /> The voter list has been saved.</strong></p>';
			$html .= "\n" . '<h3>The ballot is now ready!</h3>';
			$html .= "\n<p>You can now <a href=\"{$this->baseUrl}{$ballot['url']}\"><img src=\"/images/icons/bullet_go.png\" alt=\"\" class=\"icon\" /> return to the control panel page for this ballot</a> to check things over.</p>";
		}
		
		# Show the HTML
		echo $html;
	}
	
	
	# Function to whether to require 3 columns (no college) or 4 columns (with college)
	private function requiredFields ($ballot)
	{
		# If online-only, either College-only or University-wide, then only usernames are ever used
		if (!$ballot['paperVotingEnd']) {return 1;}
		
		# College ballot with paper vote
		#!# Nasty hard-coding - need to move these into the provider definition structure
		if ($ballot['provider'] == 'bwp') {return 3;}
		if ($ballot['provider'] == 'university') {return 1;}
		
		# University-wide ballot with paper vote
		return 4;
	}
	
	
	# Function to convert a text block of voters into an associative array
	private function votersFromText ($votersTextBlock, $fields)
	{
		# Define the mail domain regexp
		$mailDomainQuoted = preg_quote ('@' . $this->settings['mailDomain']);
		
		# Split the list by newline then by tab, trimming surrounding whitespace at each stage
		$voters = explode ("\n", $votersTextBlock);
		foreach ($voters as $index => $voter) {
			$voter = trim ($voter);
			$voter = explode ("\t", $voter, $fields);
			
			# Add the fields, starting with the most verbose format
			$username = $this->cleanUsername ($voter[0], $mailDomainQuoted);
			switch ($fields) {
				case 4:
					$voterDetails[$username]['unit']  = trim ($voter[3]);	// then fall-through to add the following ones
				case 3:
					$voterDetails[$username]['surname']  = trim ($voter[2]);
					$voterDetails[$username]['forename'] = trim ($voter[1]);	// then fall-through to add the last one
				case 1:
					$voterDetails[$username]['username'] = $username;	// i.e. $voter[0], cleaned up
			}
		}
		
		# Return the list
		return $voterDetails;
	}
	
	
	# Function to clean a username
	private function cleanUsername ($username, $mailDomainQuoted)
	{
		# Remove the mail domain if present, trimming before and after and lower-casing
		return strtolower (trim (preg_replace ("/^(.+){$mailDomainQuoted}$/iD", '\\1', trim ($username))));
	}
	
	
	# View a ballot form that is not yet live
	protected function ballotview ()
	{
		# End if there is no such ballot or the user has no rights to it
		if (!$ballot = $this->editableBallotExistsHere ()) {return false;}
		
		# Get the total number of voters
		if (!$totalVoters = $this->getTotalVoters ($ballot)) {
			echo "\n<p>There are currently no voters, so the ballot form cannot be displayed.<br />Please firstly <a href=\"{$this->baseUrl}{$ballot['url']}voters.html\"><strong>add the list of voters</strong></a>.</p>";
			echo "\n<p>Or, return to the <a href=\"{$this->baseUrl}{$ballot['url']}\">Ballot editing options page</a>.</p>";
			return false;
		}
		
		# Give information about the form
		echo "\n<div class=\"warningbox\">";
		echo "\n\t<p>Below is a copy of the form that will be displayed when the ballot goes live.<br />The version below is inactive and votes cannot be cast from it.<p>";
		echo "\n\t<p class=\"warning\"><strong>Check the title of each ballot and that the candidates are all listed.</strong><p>";
		if ($ballot['randomisationInfo'] == 'Candidate order has been automatically randomised') {
			echo "\n\t<p class=\"warning\">Note: An example randomisation is shown. The randomisation used on the live ballot may be different.<p>";
		}
		echo "\n</div>";
		echo "\n<p>When you've finished here, return to the <a href=\"{$this->baseUrl}{$ballot['url']}\">Ballot editing options page</a>.</p>";
		echo "\n<br /><hr /><br />";
		
		# Parse the election info (convert from text block to array)
		$electionInfo = $this->parseElectionInfo ($ballot['electionInfo']);
		
		# Compile into the format expected by BOB
		$ballot['electionInfo'] = array ();
		foreach ($electionInfo as $index => $election) {
			$ballot['electionInfo'][$index] = array_merge (array ($election['title']), $election['candidates']);
		}
		
		# Show the ballot page in BOB statically
		require_once ($this->settings['bobDirectory'] . 'BOB.php');
		$ballot['voterReceiptDisableable'] = $this->settings['voterReceiptDisableable'];
		BOB::viewBallotPageExternal ($ballot, $submitTo = 'view.html');
	}
	
	
	# Text for the understand pages
	private function understandText ($ballotUrl = false)
	{
		# Build the HTML
		$html  = "
		<p>This page aims to describe, for the benefit of the Returning Officer, how the voting process works. </p>
		" . ($ballotUrl ? '' : "<p>You'll get a customised version of these instructions (containing links), via the Administer page, if/when you've created a vote.</p>") . "
		<p>The main public <a href=\"{$this->baseUrl}/about.html\"><img src=\"/images/icons/help.png\" alt=\"\" class=\"icon\" /> How it works</a> page gives more information, but the main information of relevance to the Returning Officer is as follows:</p>
		<p>If, having read all of this page, you have any questions, please do <a href=\"{$this->baseUrl}/feedback.html\">contact us</a>.</p>
		<h3>1. Setup</h3>
		<ol type=\"a\">
			<li>You should start by clicking on the 'add a new ballot' link.</li>
			<li>You should set things up in good time - do not leave things till the last minute (see next point also).</li>
			<li>Two hours before the vote is due to open, the vote configuration and voter list will be locked and cannot be edited/deleted.</li>
			<li>Note that, if you make any changes to the " . ($ballotUrl ? "<a href=\"{$this->baseUrl}{$ballotUrl}edit.html\">vote configuration</a>" : 'vote configuration') . ' or ' . ($ballotUrl ? "<a href=\"{$this->baseUrl}{$ballotUrl}voters.html\">voter list</a>" : 'voter list') . ", these changes will be copied to the live server at the next half-past-the-hour (i.e. <strong>not</strong> immediately).</li>
		</ol>
		<h3>2. Voters should check the electoral roll</h3>
		<ol type=\"a\">
			<li>Publicise the <strong>Voting Page</strong>" . ($ballotUrl ? ": <a href=\"{$this->settings['liveServerUrl']}{$ballotUrl}\">{$this->settings['liveServerUrl']}{$ballotUrl}</a>" : '') . ", making sure it starts with http<u>s</u>.</li>
			<li>Ask voters to go to that webpage to check if they are on the electoral roll. If someone is missing, " . ($ballotUrl ? "<a href=\"{$this->baseUrl}{$ballotUrl}voters.html\">update the voter list</a>" : 'update the voter list') . ".</li>
		</ol>
		<h3>3. Voting takes place</h3>
		<ol type=\"a\">
			<li>The ballot will open at the Voting Page at the time you specified.</li>
			<li>The Returning Officer can go to the " . ($ballotUrl ? "<a href=\"{$this->settings['liveServerUrl']}{$ballotUrl}?admin\">live vote admin page</a>" : 'live vote admin page') . " at any time.</li>
			<li>When someone votes, the master system mailbox will get a e-mail (vote receipt) for auditing purposes. This is also blind-carbon-copied to the voter, so the voter cannot be identified.</li>
			<li>Voters cannot change/delete their vote after voting, or vote again.</li>
			<li>The online voting will close at the time you specified.</li>
		</ol>
		<h3>4. End of ballot</h3>
		<ol type=\"a\">
			<li>As soon as the vote closes, the totals &amp; counts will appear as links on the Voting Page (unless you specified additional paper voting). Immediate appearance of these cannot be disabled.</li>
			<li>It is the Returning Officer's responsibility to check these counts.</li>
			<li>The Returning Officer should then review the results and declare them when satisfied as to their accuracy.</li>
		</ol>
		<h3>5. Optional: Additional paper voting (if relevant)</h3>
		<ol type=\"a\">
			<li>If you specified additional paper voting after online voting, and wish to obtain pre-formatted ballot sheets, go to the " . ($ballotUrl ? "<a href=\"{$this->settings['liveServerUrl']}{$ballotUrl}?admin\">live vote admin page</a>" : 'live vote admin page') . " and print off the Electoral Roll and paper ballots. Then run the additional paper voting. Those who have voted online already will be marked as crossed off.</li>
			<li>At the time of close of paper voting you specified, the totals &amp; counts will appear as links on the Voting Page.</li>
			<li>Enter the paper votes into the system using the " . ($ballotUrl ? "<a href=\"{$this->settings['liveServerUrl']}{$ballotUrl}?admin_additionalvotes\">'Enter additional votes (from paper voting)' page</a>" : "'Enter additional votes (from paper voting)' page") . " in the admin area, following the instructions there.</li>
			<li>(Alternatively, if you wish to conduct the count on your computer, take that count data, add the paper count data, and calculate the STV results. <a href=\"http://www.openstv.org/\" target=\"_blank\">OpenSTV</a> may be helpful for this.)</li>
			<li>The Returning Officer should then review the results and declare them when satisfied as to their accuracy.</li>
		</ol>
		";
		
		# Return the HTML
		return $html;
	}
	
	
	# Page to describe how it works, for the Returning Officer's benefit
	protected function ballotunderstand ()
	{
		# End if there is no such ballot or the user has no rights to it
		if (!$ballot = $this->editableBallotExistsHere ($checkInEditabilityPeriod = false)) {return false;}
		
		# Add the HTML
		$html  = $this->understandText ($ballot['url']);
		
		# Show the HTML
		echo $html;
	}
	
	
	# Delete a ballot instance
	protected function ballotdelete ()
	{
		# End if there is no such ballot or the user has no rights to it
		if (!$ballot = $this->editableBallotExistsHere ()) {return false;}
		
		# Get the total voters
		$totalVoters = $this->getTotalVoters ($ballot);
		
		# Start the HTML
		$html  = '';
		
		# Confirmation form
		$form = new form (array (
			'databaseConnection' => $this->databaseConnection,
			'formCompleteText' => false,
			'display'	=> 'paragraphs',
			'displayRestrictions' => false,
		));
		$form->heading ('', '<p>This form lets you delete the following ballot configuration' . ($totalVoters ? ' and the list of voters' : '') . '. This <strong>cannot</strong> be done.</p>');
		$form->heading ('', "<p>If you don't want to do this, return to the <a href=\"{$this->baseUrl}{$ballot['url']}\">Ballot editing options page</a>.</p>");
		$form->heading (3, 'Deletion form');
		$form->heading ('', "<p>This form will delete the following ballot:</p>");
		$form->heading ('', $this->ballotMetadataTable ($ballot));
		$form->select (array (
			'name'		=> 'delete',
			'title'		=> 'Are you sure you want to delete this ballot?',
			'values'	=> array ('YES'),
			'required'	=> true,
			'nullText'	=> false,
		));
		$form->input (array (
			'name'			=> 'confirmation',
			'title'			=> 'Type YES to confirm that you <strong>really</strong> wish to delete this ballot and list of voters',
			'required'		=> true,
			'regexp'		=> '^YES$',
			'size'			=> 3,
			'maxlength'		=> 3,
		));
		
		# Process the form or end
		if ($result = $form->process ($html)) {
			
			# Implement the changes
			$organisationId = $ballot['organisation'];
			if (!$this->implementBallot (__FUNCTION__, $organisationId, $ballot)) {
				echo $html;
				$this->showErrors (true);
				return false;
			}
			
			# Confirm success
			$html .= "\n" . '<p><strong><img src="/images/icons/wand.png" alt="*" class="icon" /> The ballot has been deleted. This will be reflected on the live server within the next hour.</strong></p>';
			$html .= "\n<p>You can <a href=\"{$this->baseUrl}/\">return to the control panel front page</a>.</p>";
		}
		
		# Show the HTML
		echo $html;
	}
	
	
	# Wrapper to implement ballot additions/changes/deletions (SQL and file), taking input from a form
	private function implementBallot ($function, $organisationId, $ballot, $voters = array (), $hadPaperVoteBeforeEditing = false)
	{
		# Log this change
		$logEntry = date ('r') . "\t" . $this->user . "\t" . $function . "\t" . $organisationId . "\t" . "Voters: " . ($voters ? count ($voters) : 'n/a') . "\t" . str_replace (array ("\r", "\n"), array ('', "\\n"), print_r ($ballot, true)) . "\r\n";
		#!# Needs further auditing - should be applicationRoot + /controlpanel/logfile.txt
		$logfile = $_SERVER['DOCUMENT_ROOT'] . $this->baseUrl . $this->settings['logfile'];
		file_put_contents ($logfile, $logEntry, FILE_APPEND);
		
		# Take action depending on the function
		switch ($function) {
			
			# Add a new ballot
			case 'addballot':
				
				# Insert instance SQL entry
				if (!$this->saveBallotInstance ($ballot, $function)) {return false;}
				
				break;
				
			# Add voters to a created ballot; only at this stage is the votes table (i.e. instance structure) created also
			case 'ballotvoters':
				
				# Truncate voter table if it exists (i.e. there are voters); create voter table if it doesn't exist; insert voters
				if (!$this->voterTable ($ballot, $voters)) {return false;}
				
				# Drop votes table if it exists (i.e. if there are voters)
				if (!$this->dropTable ($ballot['id'], 'votes')) {return false;}
				
				# Create votes table
				if (!$this->votesTable ($ballot)) {return false;}
				
				# Timestamp the instance entry that the ballot is now setup, the first time only
				if (!strlen ($ballot['instanceCompleteTimestamp']) && $ballot['instanceCompleteTimestamp'] != '0000-00-00 00:00:00') {
					$query = "UPDATE `{$this->settings['database']}`.`{$this->settings['table']}` SET instanceCompleteTimestamp=NOW() WHERE id='" . addslashes ($ballot['id']) . "';";
					if (false === $this->databaseConnection->execute ($query)) {
						$this->errors[] = "There was a problem updating the instances table at the end of the voter addition stage to mark the instance being completed.";
						return false;
					}
				}
				
				break;
				
			# Edit an existing ballot instance
			case 'ballotedit':
				
				# Update instance SQL entry
				if (!$this->saveBallotInstance ($ballot, $function)) {return false;}
				
				# Drop votes table if it exists (i.e. if there are voters)
				if (!$this->dropTable ($ballot['id'], 'votes')) {return false;}
				
				# Create votes table
				if (!$this->votesTable ($ballot)) {return false;}
				
				# Ensure the table of voters is correct, and correct it if not, which may involve clearing it
				if (!$this->correctVoterListFields ($ballot)) {return false;}
				
				break;
				
			# Delete a ballot instance
			case 'ballotdelete':
				
				# Delete voter and votes tables if they exist (i.e. if there are voters)
				if (!$this->dropTable ($ballot['id'], 'voter')) {return false;}
				if (!$this->dropTable ($ballot['id'], 'votes')) {return false;}
				
				# Delete instance SQL entry
				if (!$this->deleteBallotInstance ($ballot)) {return false;}
				
				break;
		}
		
		# Signal success
		return true;
	}
	
	
	# Function to insert/update a ballot instance
	private function saveBallotInstance ($ballot, $function)
	{
		# Determine whether to insert or update
		$do = ($function == 'addballot' ? 'insert' : 'update');
		
		# Insert/update the data
		if (!$this->databaseConnection->$do ($this->settings['database'], $this->settings['table'], $ballot, ($function == 'addballot' ? false : array ('id' => $ballot['id'])))) {
			$this->errors[] = 'There was a problem ' . ($function == 'addballot' ? 'creating' : 'updating') . ' this ballot.' . "\n\n" . print_r ($this->databaseConnection->error (), true);
			return false;
		}
		
		# Signal success
		return true;
	}
	
	
	# Function to delete a ballot instance
	private function deleteBallotInstance ($ballot)
	{
		# Delete the entry
		if (!$this->databaseConnection->delete ($this->settings['database'], $this->settings['table'], array ('id' => $ballot['id']), 1)) {
			$this->errors[] = "There was a problem deleting this ballot." . "\n\n" . print_r ($this->databaseConnection->error (), true);
			return false;
		}
		
		# Signal success
		return true;
	}
	
	
	# Function to create a table from a list of fields
	#!# This is copied and adapted from BOB::createTable(); consider refactoring to read the same code statically
	private function createTable ($name, $fields, $ifNotExists = true)
	{
		# Construct the list of fields
		$fieldsSql = array ();
		foreach ($fields as $fieldname => $specification) {
			$fieldsSql[] = "{$fieldname} {$specification}";
		}
		
		# Compile the overall SQL; type is deliberately set to InnoDB so that rows are physically stored in the unique key order
		$query = 'CREATE TABLE' . ($ifNotExists ? ' IF NOT EXISTS' : '') . " `{$this->settings['database']}`.`{$name}` (" . implode (', ', $fieldsSql) . ") ENGINE=InnoDB CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
		
		# Create the table
		if (false === $this->databaseConnection->execute ($query)) {
			$this->errors[] = "There was a problem setting up the {$name} table." . "\n\n" . print_r ($this->databaseConnection->error (), true);
			return false;
		}
		
		# Signal success
		return true;
	}
	
	
	# Function to create/update voter table and insert voters
	private function voterTable ($ballot, $voters)
	{
		# Determine the voters table
		$voterTable = $ballot['id'] . '_voter';
		
		# Create the table
		#!# Currently this stuff is copied from BOB::setupTables(); consider refactoring to read the same code statically
		$voterTableFields = array (
			'username'	=> 'VARCHAR(16) collate utf8_unicode_ci NOT NULL PRIMARY KEY',	// Voter usernames
			'voted'		=> 'TINYINT(4) DEFAULT 0',										// The flag for whether a voter has voted, defaulting to 0
			'forename'	=> 'VARCHAR(255) collate utf8_unicode_ci',						// Forename (optional)
			'surname'	=> 'VARCHAR(255) collate utf8_unicode_ci',						// Surname (optional)
			'unit'		=> 'VARCHAR(255) collate utf8_unicode_ci',						// Organisational unit (optional), e.g. college
		);
		if (!$this->createTable ($voterTable, $voterTableFields)) {
			return false;
		}
		
		# Delete the current voter list if there is one
		if ($currentVoters = $this->getTotalVoters ($ballot)) {
			if (false === $this->databaseConnection->execute ("TRUNCATE TABLE `{$voterTable}`;")) {
				$this->errors[] = "There was a problem removing the data in the {$voterTable} table." . "\n\n" . print_r ($this->databaseConnection->error (), true);
				return false;
			}
		}
		
		# Build the query
		#!# Replace this ideally with a prepared statement, though the use of PDO::quote keeps this secure
		#!# Might need to set set session max_allowed_packet= , though in practice 25,000 users should be within 1MB, i.e. just under 400 bytes each
		$votersSql = array ();
		foreach ($voters as $voter) {
			foreach ($voter as $key => $attribute) {
				$voter[$key] = $this->databaseConnection->quote ($attribute);
			}
			$votersSql[] = '(' . implode (',', $voter) . ')';
		}
		$fields = implode (',', array_keys ($voter));	// Take the last voter's fields for convenience (since each voter has the same structure)
		$query = "INSERT INTO `{$this->settings['database']}`.`{$voterTable}` (" . $fields . ') VALUES ' . implode (',', $votersSql) . ';';
		
		# Add the voters to the voters table by issuing the built query
		if (false === $this->databaseConnection->execute ($query)) {	
			$this->errors[] = "There was a problem inserting the data into the {$voterTable} table." . "\n\n" . print_r ($this->databaseConnection->error (), true);
			return false;
		}
		
		# Signal success
		return true;
	}
	
	
	# Function to create/replace votes table
	#!# Copied and adapted from BOB; refactor to use same code
	private function votesTable ($ballot)
	{
		# Determine the voters table
		$votesTable = $ballot['id'] . '_votes';
		
		# Parse the election info
		$electionInfo = $this->parseElectionInfo ($ballot['electionInfo']);
		
		# Define the fields for the vote table, used below either for checking or table creation
		$votesTableFields = array ();	// Initialise
		$votesTableFields['token'] = 'VARCHAR(32) collate utf8_unicode_ci NOT NULL PRIMARY KEY';		// The token that the voter receives
		foreach ($electionInfo as $index => $election) {
			$vote = $index + 1;	// Field names start at 1, not 0
			$positionsAvailable = count ($election['candidates']);	// Position, in the sense of 'slot'
			for ($position = 1; $position <= $positionsAvailable; $position++) {
				$votesTableFields["v{$vote}p{$position}"] = 'TINYINT(4)';	// The list of cast ballots
			}
		}
		
		# Create the table or signal error
		if (!$this->createTable ($votesTable, $votesTableFields)) {
			return false;
		}
		
		# Signal success
		return true;
	}
	
	
	# Function to ensure the list of voters is correct, and correct it if not, which may involve clearing it (e.g. if there is a paper vote and the surname field is not present)
	private function correctVoterListFields ($ballot)
	{
		# Attempt to get one voter; this voter is treated as being typical, in the sense that the number of fields containing data will be the same as other voters have (thanks to the validation routine when entering the data)
		$voterTable = $ballot['id'] . '_voter';
		$query = "SELECT * FROM `{$voterTable}` LIMIT 1;";
 		$voter = $this->databaseConnection->getOne ($query);
		
		# If there is no data, there is nothing to delete, so end as there are no problems
		if (!$voter) {return true;}
		
		# Determine the fieldnames required, based on the details of this ballot (principally, whether paper voting is being done)
		$requiredFieldsNumber = $this->requiredFields ($ballot);
		$requiredFields = $this->fieldsTypes[$requiredFieldsNumber]['fieldnames'];
		
		# Determine whether there is data in each required field
		$missingData = false;
		foreach ($requiredFields as $requiredField) {
			if (!strlen ($voter[$requiredField])) {
				$missingData = true;
				break;
			}
		}
		
		# If any data is missing, drop the existing table of voters, forcing re-creation, making clear to the user they need to re-enter the voter list as there currently insufficient fields
		if ($missingData) {
			if (!$this->dropTable ($ballot['id'], 'voter')) {return false;}
			echo "\n<p class=\"warning\"><img src=\"/images/icons/exclamation.png\" alt=\"!\" class=\"icon\" /><strong> You must now <a href=\"{$this->baseUrl}{$ballot['url']}voters.html\">add the voters list again</a>, this time with forenames &amp; surnames, now that you are also having a paper vote. The previous list you entered has been deleted.</strong></p>";
			return true;
		}
		
		# Wipe data present in any non-needed fields; this means for example that moving from paper to non-paper vote avoids the need for the RO to re-enter the (now username-only) list
		$allPossibleFields = array ('username', 'forename', 'surname', 'unit');
		$wipeFields = array_diff ($allPossibleFields, $requiredFields);
		if ($wipeFields) {
			$extraneousData = false;
			foreach ($wipeFields as $wipeField) {
				if (strlen ($voter[$wipeField])) {
					$extraneousData = true;
					break;
				}
			}
			if ($extraneousData) {
				$newData = array_fill_keys ($wipeFields, NULL);
				$this->databaseConnection->update ($this->settings['database'], $voterTable, $newData);	// Lack of conditions means this will apply to every record
				echo "\n<p class=\"warning\"><img src=\"/images/icons/information.png\" alt=\"!\" class=\"icon\" /><strong> The <a href=\"{$this->baseUrl}{$ballot['url']}voters.html\">voters list</a> structure has been updated to remove fields that are no longer relevant. Each username, however, has been retained.</strong></p>";
			}
		}
		
		# Signal success
		return true;
	}
	
	
	# Function to delete a votes table if it exists (i.e. if there are voters)
	private function dropTable ($id, $table)
	{
		# Define the two tables
		$table = addslashes ($id) . '_' . $table;	// addslashes should not be necessary
		
		# Drop the empty table
		$query = "DROP TABLE IF EXISTS `{$this->settings['database']}`.`{$table}`;";
		if (false === $result = $this->databaseConnection->execute ($query)) {
			$this->errors[] = "There was a problem deleting the {$table} table." . "\n\n" . print_r ($this->databaseConnection->error (), true);
			return false;
		}
		
		# Signal success
		return true;
	}
	
	
	# Function to validate the election info text block
	private function uniqueIdValid ($data, $organisationId, $currentIds, &$error)
	{
		# End if no value submitted for the urlSlug (the form will catch this in another error)
		if (!strlen ($data['urlSlug'])) {return true;}
		
		# Don't run this function if the regexp hasn't been passed (this is a duplicate check, but avoids two error messages being returned for this widget)
		if (!preg_match ("/{$this->settings['uniqueIdRegexp']}/D", $data['urlSlug'])) {return true;}	// return true means "no problems here", so ends execution of the current checks (the form will catch the problem at the per-widget left)
		
		# Obtain the start date, as that will determine the unique ID; end if start date is not completed (the form will catch this in another error)
		$ballotStart = ((strlen ($data['ballotStart_time']) && strlen ($data['ballotStart_date'])) ? strtotime ($data['ballotStart_date'] . ' ' . $data['ballotStart_time']) : false);
		if (!$ballotStart) {return true;}	// ditto: end checking
		
		# Assemble the complete unique ID from the URL slug proposed by the user, namely organisation + year [from opening date] + URL slug
		$uniqueId = $organisationId . '-' . $this->academicYearFromStartDate ($data['ballotStart_date']) . '-' . $data['urlSlug'];
		
		# Check that it is not in the list already
		if (in_array ($uniqueId, $currentIds)) {
			$error = 'Please specify another unique identifier - that one already exists for the academic year derived from the start date below.';
			return false;
		}
		
		# Signal all tests passed
		return true;
	}
	
	
	# Function to ensure the officialsUsernames are all valid
	private function officialsUsernamesValid ($string, &$error)
	{
		# End if no data
		if (!strlen ($string)) {return true;}	// return true means "no problems here", so ends execution of the current checks (the form will catch the problem at the per-widget left)
		
		# As a courtesy (not a security check), spot likely separators
		if (preg_match ("/[\t;\|\+]/D", $string)) {
			$error = "In the list of Returning Officers' usernames: usernames must each be separated by comma/space, if you have more than one.";
			return false;
		}
		
		# Explode by commas and/or spaces
		$usernames = preg_split ("/[\s,]+/", $string);
		
		# Ensure the first is the current user
		if ($usernames[0] !== $this->user) {
			$error = "In the list of officials' usernames: the first username must be yourself, " . htmlspecialchars ($this->user);
			return false;
		}
		
		# Ensure any other usernames match the regexp
		foreach ($usernames as $username) {
			if (!preg_match ("/{$this->settings['usernameRegexp']}/D", $username)) {
				$error = "In the list of officials' usernames: the username (" . htmlspecialchars ($username) . ') seems not to be valid.';
				return false;
			}
		}
		
		# Ensure that there are no duplications
		$nonDuplicatedUsernames = array_unique ($usernames);
		if (count ($usernames) != count ($nonDuplicatedUsernames)) {
			$error = "In the list of officials' usernames: Usernames must not be duplicated.";
			return false;
		}
		
		# Signal all tests passed
		return true;
	}
	
	
	# Function to ensure the front page or after-vote extra message strings has no HTML from the user
	private function messageStringValid ($string, &$error, $description)
	{
		# End if no data
		if (!strlen ($string)) {return true;}	// return true means "no problems here", so ends execution of the current checks (the form will catch the problem at the per-widget left)
		
		# Check there is no HTML
		if ($string != strip_tags ($string)) {
			$error = "In the {$description}: HTML tags are not permitted.";
			return false;
		}
		
		# Signal all tests passed
		return true;
	}
	
	
	# Function to validate the election info text block; this uses a similar routine to that in bob::processConfiguration(); note that at present this function requires exactness rather than trying to auto-correct things
	#!# Consider refactoring to make BOB have a static method doing the same thing, so that both share the same code, though what is currently below does stricter checking than BOB
	function parseElectionInfo ($string, &$error = array ())
	{
		# Trim whitespace and standardise to Unix newlines
		$string = trim ($string);	// Through the form will produce trimmed data anyway
		$string = str_replace ("\r\n", "\n", $string);
		
		# End if no data
		if (!strlen ($string)) {return true;}	// return true means "no problems here", so ends execution of the current checks (the form will catch the problem at the per-widget left)
		
		# Prevent triple line-breaks
		if (substr_count ($string, "\n\n\n")) {
			$error = 'In the election info: there must only be a single extra line between each election.';
			return false;
		}
		
		# Split into each election, by finding the double line-breaks (if any - if not, there is only a single election)
		$elections = explode ("\n\n", $string);
		
		# Loop through each election and create arrays of the election details and the number of positions
		$electionInfo = array ();
		$positions = array ();
		$rearrangedData = array ();
		foreach ($elections as $index => $election) {
			$electionInfo[$index] = explode ("\n", $election);
			
			# Check there is no extraneous whitespace after each line
			foreach ($electionInfo[$index] as $key => $value) {
				if ($value != trim ($value)) {
					$error = 'In the election info: whitespace was found at the beginning/end of a line, which must be removed first.';
					return false;
				}
			}
			
			# Ensure each election has at least three lines, i.e. position, title, name(s)/referenda-keyword
			if (count ($electionInfo[$index]) < 3) {
				$error = 'In the election info: the block of text for each election must have at least three lines, as shown in the explanation above.';
				return false;
			}
			
			# Ensure each election starts with a number as the first line
			if (!ctype_digit ($electionInfo[$index][0])) {
				$error = 'In the election info: the first line of text for each election must be numeric (an integer).';
				return false;
			}
			
			# Check that a referendum keyword is lower-case
			if ($electionInfo[$index][2] == 'Referendum') {
				$error = 'In the election info: the third-line referendum keyword must be lower-case, i.e. referendum not Referendum .';
				return false;
			}
			
			# Additional checks for a referendum
			if ($electionInfo[$index][2] == 'referendum') {
				
				# Check that a referendum only has a single position
				if ($electionInfo[$index][0] != 1) {
					$error = 'In the election info: a referendum must only have a single position, i.e. 1 in the first line.';
					return false;
				}
				
				# Check that a referendum only has three lines
				if (count ($electionInfo[$index]) != 3) {
					$error = 'In the election info: the block of text for a referendum must be only three lines.';
					return false;
				}
			}
			
			# Check that there are not more positions than candidates
			$positions = $electionInfo[$index][0];
			$candidates = count ($electionInfo[$index]) - 2;	// -2 is to exclude the count and title
			if ($positions > $candidates) {
				$error = 'In the election info: a vote cannot have more positions to be elected than there are candidates.';
				return false;
			}
			
			# Re-arrange the data
			$rearrangedData[$index]['positions'] = $electionInfo[$index][0];
			$rearrangedData[$index]['title'] = $electionInfo[$index][1];
			$rearrangedData[$index]['isReferendum'] = ($electionInfo[$index][2] == 'referendum');
			array_shift ($electionInfo[$index]);	// Remove first line
			array_shift ($electionInfo[$index]);	// Remove second line
			$rearrangedData[$index]['candidates'] = $electionInfo[$index];	// The remainder
			
			# Ensure the candidates are SURNAME, forename
			if (!$this->settings['disableSurnameForenameRequirement']) {
				foreach ($rearrangedData[$index]['candidates'] as $candidate) {
					#!# Would ideally check that RON is actually being added automatically
					if (($candidate != $this->reOpenNominations) && !$rearrangedData[$index]['isReferendum']) {
						if (!preg_match ('/([^,]+), (.+)/i', $candidate, $matches)) {
							$error = 'All candidates must be listed as: <strong>SURNAME, forename</strong> but <strong>' . htmlspecialchars ($candidate) . '</strong> was not';
							return false;
						}
						list ($complete, $surname, $forename) = $matches;
						$surnameUppercased = utf8_encode (strtoupper (utf8_decode ($surname)));	// i.e. mb_strtoupper
						if ($surname != $surnameUppercased) {
							$error = 'All candidates must be listed as: <strong>SURNAME, forename</strong> but <strong>' . htmlspecialchars ($candidate) . '</strong> was not';
							return false;
						}
					}
				}
			}
			
			#!# Ideally add a semantic check to avoid an automatic and explicit RON both being present
			
		}
		
		# Return the rearranged data, which will evaluate to true; if this passes, the value coming out of the form itself can be judged to be completely clean and suitable for BOB
		return $rearrangedData;
	}
	
	
	# Function to validate the ballot times are sane
	function timesDatesValid ($data, $organisationId, &$error, &$fieldname)
	{
		# Convert the times into unixtime for easy comparison
		$ballotStart = ((strlen ($data['ballotStart_time']) && strlen ($data['ballotStart_date'])) ? strtotime ($data['ballotStart_date'] . ' ' . $data['ballotStart_time']) : false);
		$ballotEnd = ((strlen ($data['ballotEnd_time']) && strlen ($data['ballotEnd_date'])) ? strtotime ($data['ballotEnd_date'] . ' ' . $data['ballotEnd_time']) : false);
		$paperVotingEnd = ((strlen ($data['paperVotingEnd_time']) && strlen ($data['paperVotingEnd_date'])) ? strtotime ($data['paperVotingEnd_date'] . ' ' . $data['paperVotingEnd_time']) : false);
		
		# Do not run if start and end are not both completed (the form will catch this in another error)
		if (!$ballotStart || !$ballotEnd) {return true;}	// return true means "no problems here", so ends execution of the current checks (the form will catch the problem at the per-widget left)
		
		# Check that the start time is not too early
		$earliestStart = $this->earliestUnixTime ();
		if ($ballotStart < $earliestStart) {
			$fieldname = 'ballotStart_time';	// Assign the error label to this field
			$error = 'The start date/time must be at least ' . ($this->settings['ballotFixedHoursFromOpening'] == 1 ? 'one hour' : $this->settings['ballotFixedHoursFromOpening'] . ' hours') . " from now (as this is a requirement of the security system in place). The earliest available start time is " . $this->nextHourStartFormatted ($earliestStart) . '.';
			return false;
		}
		
		# Check that the start is before the end
		if ($ballotEnd <= $ballotStart) {
			$fieldname = 'ballotEnd_time';
			$error = 'The end date must be after the start date';
			return false;
		}
		
		# Check that the ballot is open for at least the minimum opening period
		$oneHour = (1 * 60 * 60);
		if (($ballotEnd - $ballotStart) < ($this->settings['minimumOpeningHours'] * $oneHour)) {
			$fieldname = 'ballotEnd_time';
			$error = 'The ballot must be open to voters for at least ' . ($this->settings['minimumOpeningHours'] == 1 ? 'one hour' : $this->settings['minimumOpeningHours'] . ' hours');
			return false;
		}
		
		# Prevent ballots running for an excessive length of time
		$maximumOpeningDays = (in_array ($organisationId, $this->settings['maximumOpeningExtendedGroups']) ? $this->settings['maximumOpeningExtendedDays'] : $this->settings['maximumOpeningDays']);
		$oneDay = $oneHour * 24;
		if (($ballotEnd - $ballotStart) > ($maximumOpeningDays * $oneDay)) {
			$fieldname = 'ballotEnd_time';
			$error = 'The ballot cannot be open for more than ' . ($maximumOpeningDays == 1 ? 'one day' : $maximumOpeningDays . ' days');
			return false;
		}
		
		# If a paperVote has been specified, it must be after (or equal to) the ballotStart
		#!# Need to consider whether this restriction is actually necessary
		if ($paperVotingEnd) {
			if ($paperVotingEnd <= $ballotStart) {
				$fieldname = 'paperVotingEnd_time';
				$error = 'The time specified for close of paper voting must be after the online start time';
				return false;
			}
		}
		
		# Signal all tests passed
		return true;
	}
	
	
	# Function to return pre-formatted times
	private function preformattedTimes ()
	{
		# Times
		return $times = array (
			'00:00:00' => '0:00am (midnight)',
			'01:00:00' => '1:00am',
			'02:00:00' => '2:00am',
			'03:00:00' => '3:00am',
			'04:00:00' => '4:00am',
			'05:00:00' => '5:00am',
			'06:00:00' => '6:00am',
			'07:00:00' => '7:00am (early morning)',
			'08:00:00' => '8:00am',
			'09:00:00' => '9:00am',
			'10:00:00' => '10:00am',
			'11:00:00' => '11:00am',
			'12:00:00' => '12:00pm (midday)',
			'13:00:00' => '1:00pm (afternoon)',
			'14:00:00' => '2:00pm',
			'15:00:00' => '3:00pm',
			'16:00:00' => '4:00pm',
			'17:00:00' => '5:00pm',
			'18:00:00' => '6:00pm',
			'19:00:00' => '7:00pm',
			'20:00:00' => '8:00pm',
			'21:00:00' => '9:00pm',
			'22:00:00' => '10:00pm',
			'23:00:00' => '11:00pm',
		);
	}
	
	
	# Function to give the next pre-formatted time from a given timestamp
	private function nextHourStartFormatted ($unixTimestamp)
	{
		# Work out the next hour, e.g. 19 for 18:59:00, or 0 (i.e. 24) for 23:20:45
		$currentHour = date ('H', $unixTimestamp);
		$nextHour = $currentHour + 1;
		if ($nextHour == 24) {$nextHour = 0;}
		
		# Format as e.g. 19:00:00 or 00:00:00
		$nextHourFull = str_pad ($nextHour, 2, '0', STR_PAD_LEFT) . ':00:00';
		
		# Get the list of pre-formatted times and replace the listed hour with the formatted version, e.g. 19:00:00 will return '7:00pm'
		$preformattedTimes = $this->preformattedTimes ();
		$formattedNextHour = $preformattedTimes[$nextHourFull];
		
		# Return the formatted time
		return $formattedNextHour;
	}
	
	
	# Function to return pre-formatted times
	private function preformattedDates ($daysAhead)
	{
		# Get the earliest time that a ballot can be created for
		$earliest = $this->earliestUnixTime ();
		
		# Construct the list of dates
		$oneDay = (24 * 60 * 60);
		$dates = array ();
		for ($days = 0; $days < $daysAhead; $days++) {
			$unixTime = $earliest + ($days * $oneDay);
			$dateSql = date ('Y-m-d', $unixTime);
			$dateVisible = date ('l, jS F, Y', $unixTime);
			$dates[$dateSql] = $dateVisible;
		}
		
		# Return the list
		return $dates;
	}
	
	
	# Function to get the earliest time a ballot can be created from now
	private function earliestUnixTime ()
	{
		# Determine the earliest time that a ballot can be created for
		$oneHour = (1 * 60 * 60);
		$earliest = time () + ($this->settings['ballotFixedHoursFromOpening'] * $oneHour);
		
		# Return the unixtime
		return $earliest;
	}
	
	
	# Function to provide a organisation selection table
	private function organisationSelectionTable ($organisationsOfUser, $providerMetadata, $actionUrl = false)
	{
		# Start the HTML
		$html  = '';
		
		# Load required libraries
		require_once ('image.php');
		
		# Create the table
		$links = array ();
		foreach ($organisationsOfUser as $providerId => $organisations) {
			
			# Add the title for this type of provider, if multiple organisations are expected
			if (!$this->settings['singleOrganisationMode']) {
				$html .= "\n<h3 class=\"selectlist\">" . htmlspecialchars ($providerMetadata[$providerId]['name']) . ':</h3>';
				$html .= "\n<p>" . ($organisations ? "If you think you should be the manager for a {$providerMetadata[$providerId]['typeSingularUcfirst']} not listed here" : "You do not appear to be not registered as the manager for any {$providerMetadata[$providerId]['typeSingularUcfirst']}.<br />If you think you should be") . ", please " . ($providerMetadata[$providerId]['managerClaimFormLocation'] ? "use the <a href=\"{$providerMetadata[$providerId]['baseUrl']}{$providerMetadata[$providerId]['managerClaimFormLocation']}\">{$providerMetadata[$providerId]['typeSingularUcfirst']} manager claim form</a> elsewhere on the website.</p>" : "<a href=\"{$this->baseUrl}/feedback.html\">contact the system administrator</a>.");
			}

			# Add each organisation
			$links = array ();
			foreach ($organisations as $organisationId => $organisation) {
				$linkStart = "<a href=\"{$this->baseUrl}/{$organisationId}/{$actionUrl}\">";
				$links[$organisationId]['logo'] = ($organisation['logoLocation'] ? $linkStart . image::imgTag ($organisation['logoLocation'], $organisation['organisationName'], 'right') . '</a>' : '');
				$links[$organisationId]['text'] = "<h4>{$linkStart}" . htmlspecialchars ($organisation['organisationName']) . '</a></h4>';
				if ($organisationId == 'test') {
					$links[$organisationId]['text'] .= "\n<p>(You are welcome to use this to test setting up ballots.)</p>";
				}
			}
			
			# Compile the HTML
			$html .= application::htmlTable ($links, false, $class = 'selectlist spaced lines', $showKey = false, $uppercaseHeadings = false, $allowHtml = true);
		}
		
		# Return the HTML
		return $html;
	}
	
	
	# Function to provide a public front page for each organisation on a per-year basis
	protected function organisationyear ($organisationId)
	{
		# Hand off to the organisation function
		return $this->organisation ($organisationId, true);
	}
	
	
	# Function to provide a public front page for each organisation
	protected function organisation ($organisationId, $date = false)
	{
		# Do year lookup if date mode is specified
		$year = array ();
		if ($date) {
			$year = $this->academicYearUrlHandling ();
		}
		
		# Get all ballots for a specific organisation
		if (!$organisationBallots = $this->getBallotInstances (false, $organisationId, $dateLimitation = false, $regroupByOrganisation = false)) {
			$html  = "\n<h2>Ballots for a specific organisation" . ($date ? ($year ? $year['yearString'] : ' for a specific year') : '') . '</h2>';
			$html .= "\n<p>There is no such organisation, or it has not used this system to create any ballots yet.</p>";
			echo $html;
			return false;
		}
		
		# If required, do date-based lookup; ideally this would be combined, but a joint lookup could result in a 'page not found' when the organisation exists but has no ballots for this year
		if ($date) {
			
			# Assign the organisation name (using the last in the list, which is the last created); it is OK to modify the organisationBallots data as it will get overwritten below if the year is valid and there are instances
			$organisation = array_pop ($organisationBallots);
			$organisationName = $organisation['organisationName'];	 // Cache in case the year lookup fails
			
			# Check the year is valid, or end (as date mode has been requested)
			if (!$year) {
				$html  = "\n<h2>Ballots for " . htmlspecialchars ($organisationName) . ' for a specific year</h2>';
				$html .= "\n<p>The specified year was invalid. Please check the URL and try again.</p>";
				echo $html;
				$this->page404 ();
				return false;
			}
			
			# Allocate the year as $date, as if dateMode is in use, then the year has been validated
			$date = $year;
			
			# Check for instances in this (now validated) year
			if (!$organisationBallots = $this->getBallotInstances (false, $organisationId, $year, $regroupByOrganisation = false)) {
				$html  = "\n<h2>Ballots for " . htmlspecialchars ($organisationName) . $year['yearString'] . '</h2>';
				$html .= "\n<p>There " . ($date['isEarlierAcademicYear'] ? 'were' : 'are') . " no ballots for " . htmlspecialchars ($organisationName) . $year['yearString'] . '.</p>';
				echo $html;
				return false;
			}
		}
		
		# Get the latest created one and use it as the organisation details
		$ballotsForOrganisation = $organisationBallots;	// Create a copy as array_pop will amend the original array otherwise
		$organisation = array_pop ($ballotsForOrganisation);
		
		# Start the HTML with introductory information about the organisation, using the latest in the list
		$html  = "\n<h2>Ballots for " . htmlspecialchars ($organisation['organisationName']) . ($date ? $date['yearString'] : '') . '</h2>';
		$linkStart = ($organisation['organisationUrl'] ? "<a href=\"{$organisation['organisationUrl']}\">" : false);
		$html .= ($organisation['organisationLogoUrl'] ? "{$linkStart}<img id=\"{$organisation}\" src=\"{$organisation['organisationLogoUrl']}\" alt=\"" . htmlspecialchars ($organisation['organisationName']) . "\" height=\"80\" class=\"right\" />" . ($linkStart ? '</a>' : '') : '');
		$html .= "\n<ul>\n\t<li>More info: {$linkStart}" . htmlspecialchars ($organisation['organisationName']) . ($linkStart ? '</a>' : '') . "</li>\n</ul>";
		$html .= "\n<hr class=\"clear\" />";
		
		# Current ballots (show if there is no date limitation, or there is date limitation and it is the current year)
		if (!$date || $date['isCurrentAcademicYear']) {
			$html .= "\n<h3>Current ballots for " . htmlspecialchars ($organisation['organisationName']) . "</h3>";
			if ($currentBallots = $this->getBallotInstances (false, $organisationId, $dateLimitation = false, $regroupByOrganisation = false, $currentBallotsOnly = true)) {
				$html .= $this->ballotsToListing ($currentBallots, 'ballotEndFormatted', 'Closes ', $singleOrganisationOnly = true);
			} else {
				$html .= "\n<p>There are no ballots currently open for " . htmlspecialchars ($organisation['organisationName']) . '.</p>';
			}
		}
		
		# Older ballots
		$html .= "\n<h3>All ballots for " . htmlspecialchars ($organisation['organisationName']) . ($date ? $date['yearString'] : '') . '</h3>';
		$html .= "\n<p>The following is a list of all the ballots (past, current or future) registered on this system" . ($date ? $date['yearString'] : '') . ".<br />The opening month of each ballot is also shown.</p>";
		$html .= $this->ballotsToListing ($organisationBallots, 'ballotStartMonthYear', '', $singleOrganisationOnly = true);
		
		# Show the HTML
		echo $html;
	}
	
	
	# Function to convert a start date (e.g. 2009-04-18) to an academic year string (e.g. '08-09')
	private function academicYearFromStartDate ($dateString)
	{
		# Obtain the year and month
		$startYear = (int) substr ($dateString, 2, 2);	// e.g. 2009-04-18 becomes 9
		$startMonth = (int) substr ($dateString, 5, 2);	// e.g. 2009-04-18 becomes 4
		
		# Subtract one from the start year if the month is less than the start month
		if ($startMonth < $this->settings['startMonth']) {
			$startYear = $startYear - 1;
		}
		
		# Set the end year and add padding to both
		$start = str_pad ($startYear, 2, '0', STR_PAD_LEFT);	// e.g. 08
		$end = str_pad ($startYear + 1, 2, '0', STR_PAD_LEFT);	// e.g. 09
		
		# Construct the string, adding padding
		$string = $start . '-' . $end;	// e.g. 08-09
		
		# Return the assembled string
		return $string;
	}
	
	
	# Helper function to deal with academic year dates from a year
	private function academicYearUrlHandling ()
	{
		# Get and validate the academic year component of the URL
		$year = (
			   isSet ($_GET['year'])	// There must be year
			&& (preg_match ('/^([0-9]{2})-([0-9]{2})$/D', $_GET['year'], $matches))	// It must match the format xx-xx, e.g. 08-09
			&& (($matches[2] - $matches[1]) == 1)	// Ensure the years are sequential
			&& ($matches[2] <= (date ('y') + 1))	// Ensure the year is not more than next year
			&& ($matches[2] < 38)	// Ensure they are below 2038 (Unix date problem) (to avoid date() crashes on 32bit PHP)
		);
		
		# End if the year is invalid
		if (!$year) {return false;}
		
		# Split the year into a start year and start year
		$date['startYear']  = '20' . $matches[1];
		$date['endYear']    = '20' . $matches[2];
		
		# Assign the start month and year
		$date['startMonth'] = $this->settings['startMonth'];
		$date['endMonth']   = ($this->settings['startMonth'] == 1 ? 12 : ($this->settings['startMonth'] - 1));
		$date['startMonthPadded'] = str_pad ($this->settings['startMonth'], 2, '0', STR_PAD_LEFT);
		$date['endMonthPadded']   = str_pad ($date['endMonth'], 2, '0', STR_PAD_LEFT);
		
		# Create a preset string
		$date['yearString'] = " for the academic year {$date['startYear']}-{$date['endYear']}";
		
		# Set whether this is the current academic year and whether the year has passed
		$now = time ();
		$start = mktime (0, 0, 0, $date['startMonth'], 1, $date['startYear']);
		$ended = mktime (0, 0, 0, $date['startMonth'], 1, $date['endYear']);
		$date['isCurrentAcademicYear'] = (($now >= $start) && ($now < $ended));
		$date['isEarlierAcademicYear'] = ($ended < $now);
		
		# Return the collection
		return $date;
	}
	
	
	# Page to link to the voting side
	function submit ()
	{
		echo $this->submitHtml ();
	}
	
	
	# Text of page to link to the voting side
	function submitHtml ()
	{
		# Start the HTML
		$html  = "\n<p>Voting takes place using a separate website, run on a high-security server.</p>";
		$html .= "\n<ul class=\"actions left\">";
		$html .= "\n\t<li><a href=\"{$this->settings['liveServerUrl']}/\"><img src=\"/images/icons/comments.png\" alt=\"\" class=\"icon\" /> Go to the secure voting server</a></li>";
		$html .= "\n</ul>";
		
		# Return the HTML
		return $html;
	}
	
	
	# Function to act as an endpoint giving the data for the 'read' GUI; this always returns a string in the form of a serialised array (which could be empty)
	function bestow ()
	{
		# End if not encrypted, as this emits personal data
		if (!substr_count (PHP_OS, 'WIN')) {		// I.e. don't perform this test on a Windows development machine
			if ($_SERVER['_SERVER_PROTOCOL_TYPE'] != 'https') {return false;}
		}
		
		# Check the API key is supplied and valid
		if (!isSet ($_GET['key'])) {return false;}
		if ($_GET['key'] != $this->settings['apiKey']) {return false;}
		
		# Start an array to hold the data to be transmitted
		$data = array ();
		
		# Set the timezone explicitly (PHP 5.3+ requires this)
		ini_set ('date.timezone', 'Europe/London');
		
		# Include a timestamp of seconds since the Unix Epoch
		$data['_timestamp'] = time ();
		
		# Send JSON header
		header('Content-type: application/json');
		
		# Get all future instances which start more than an hour ahead; this does not run through getBallotInstances as that results in computed fields, which are not wanted
		#!# Seems to transmit instanceCompleteTimestamp=NULL; need to audit this
		$query = "SELECT * FROM {$this->dataSource} WHERE NOW() < DATE_SUB(ballotStart, INTERVAL " . ($this->settings['ballotFixedHoursFromOpening'] - 1) . " HOUR);";
		if (!$futureInstances = $this->databaseConnection->getData ($query, $this->dataSource)) {
			echo json_encode ($data);	// Return an empty dataset (plus the timestamp), i.e. return a string, but which will evaluate to false when decoded
			return true;
		}
		
		# Make adjustments to each future instance
		#!# Not clear why electionInfoAsEntered is transmitted
		$removeFields = array (/* 'electionInfoAsEntered', */ 'addRon', 'instanceCompleteTimestamp', );
		foreach ($futureInstances as $instanceId => $settings) {
			
			# Re-randomise at this point
			$futureInstances[$instanceId]['electionInfo'] = $this->processElectionInfoTextBlock ($futureInstances[$instanceId]);
			
			# Remove local fields
			foreach ($removeFields as $field) {
				unset ($futureInstances[$instanceId][$field]);
			}
		}
		
		# Loop through each instance to create the structures for it
		foreach ($futureInstances as $instanceId => $settings) {
			
			# Get the voter lists for these instances
			$query = "SELECT username,forename,surname,unit FROM `{$instanceId}_voter`;";	// Explicitly exclude the 'voted' field
			$voters = $this->databaseConnection->getData ($query);
			
			# If there are no voters (or the table does not exist, i.e. a failure case), skip this instance so that it does not get registered
			if (!$voters) {continue;}
			
			# Get the table structures for these instances
			$voterTable = $this->databaseConnection->getFields ($this->settings['database'], $instanceId . '_voter');
			$votesTable = $this->databaseConnection->getFields ($this->settings['database'], $instanceId . '_votes');
			
			# Add the data to the master array
			$data[$instanceId] = array (
				'settings'		=> $settings,
				'votertable'	=> $voterTable,
				'votestable'	=> $votesTable,
				'voters'		=> $voters,
			);
		}
		
		# Serialise the data (which could be an empty array)
		$string = json_encode ($data);
		
		# Transmit
		echo $string;
	}
	
	
	# Feedback form
	public function feedback ()
	{
		# Define FAQs
		$queries = array ();
		if (!$this->settings['singleOrganisationMode']) {
			$queries['I want or should have rights to set ballots for an organisation but don\'t at the moment'] = "If so, please use the <a href=\"{$this->baseUrl}/organisation.html\">manager claim form links on this page</a> to request the current manager(s) to add you. The intention of the Directory is that organisations manage their own data, as only they know best who should have access to make changes.";
		}
		
		# Create the list, if any queries
		if ($queries) {
			#!# Dependency (non-essential) currently outside distribution
			echo "\n" . '<script type="text/javascript" src="/sitetech/collapsable.js"></script>';
			echo "\n<div class=\"graybox\">";
			echo "\n<h3>Common queries:</h3>";
			echo application::htmlDl ($queries, array (), false, 'collapsable faq', $allowHtml = true);
			echo "\n</div>";
		}
		
		# Use parent
		parent::feedback ();
	}
}


?>
